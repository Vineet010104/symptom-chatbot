import streamlit as st
import re
import random
import pandas as pd
import numpy as np
import csv
from sklearn import preprocessing
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from difflib import get_close_matches
import warnings
import requests
import json
import base64

# Suppress deprecation warnings for scikit-learn
warnings.filterwarnings("ignore", category=DeprecationWarning)

# Supported languages
LANGUAGES = {
    "English": "en",
    "Hindi (рд╣рд┐рдВрджреА)": "hi",
    "Spanish (Espa├▒ol)": "es",
    "French (Fran├зais)": "fr",
    "German (Deutsch)": "de",
    "Japanese (цЧецЬмшкЮ)": "ja",
    "Russian (╤А╤Г╤Б╤Б╨║╨╕╨╣)": "ru",
    "Arabic (╪з┘Д╪╣╪▒╪и┘К╪й)": "ar",
    "Chinese (ф╕нцЦЗ)": "zh",
    "Bengali (ржмрж╛ржВрж▓рж╛)": "bn",
    "Gujarati (ркЧрлБркЬрк░рк╛ркдрлА)": "gu",
    "Kannada (р▓Хр▓ир│Нр▓ир▓б)": "kn",
    "Malayalam (р┤ор┤▓р┤пр┤╛р┤│р┤В)": "ml",
    "Marathi (рдорд░рд╛рдареА)": "mr",
    "Odia (рмУрмбрм╝рм┐рмЖ)": "or",
    "Punjabi (рикрй░риЬри╛римрйА)": "pa",
    "Tamil (родрооро┐ро┤рпН)": "ta",
    "Telugu (р░др▒Жр░▓р▒Бр░Чр▒Б)": "te",
}

# Translations for UI text
UI_TEXT = {
    "en": {
        "title": "HealthCare Chatbot",
        "intro": "Hello! I am a chatbot designed to help you with preliminary symptom analysis. Please answer a few questions so I can understand your condition better.",
        "name_label": "What is your name?",
        "age_label": "Please enter your age:",
        "gender_label": "What is your gender?",
        "gender_options": ["Male", "Female", "Other"],
        "symptoms_label": "Describe your symptoms (any language):",
        "submit_button": "Submit",
        "warning_fill_fields": "Please enter your name and symptoms to continue.",
        "thinking": "Thinking...",
        "detected_symptoms": "тЬЕ Detected symptoms: {}",
        "error_no_symptoms": "тЭМ Sorry, I could not detect valid symptoms. Please try again with more details.",
        "guided_questions_header": "ЁЯдФ Guided Questions",
        "guided_info": "Based on your initial symptoms, you may have **{}** (Confidence: {}%).",
        "guided_prompt": "To get a more accurate diagnosis, please answer a few more questions related to this condition.",
        "guided_symptom_prompt": "Do you also have **{}**?",
        "guided_button": "Get Final Prediction",
        "no_more_questions": "No further questions to ask. Click below for your final diagnosis.",
        "result_header": "тЬи Diagnosis Result",
        "diagnosis_sub": "ЁЯй║ Based on your answers, you may have **{}**",
        "confidence_label": "Confidence Level",
        "about_sub": "ЁЯУЦ About",
        "precautions_sub": "ЁЯЫбя╕П Suggested Precautions",
        "no_description": "No description available.",
        "start_over": "Start Over",
        "thank_you": "Thank you for using the chatbot. Wishing you good health, **{}**!",
        "login_header": "Login",
        "username_label": "Username",
        "password_label": "Password",
        "login_button": "Login",
        "login_error": "Invalid username or password. Please try again.",
        "logout_button": "Logout",
        "play_audio": "ЁЯФК Play Diagnosis Audio",
    },
    "hi": {
        "title": "рд╣реЗрд▓реНрдердХреЗрдпрд░ рдЪреИрдЯрдмреЙрдЯ",
        "intro": "рдирдорд╕реНрддреЗ! рдореИрдВ рдПрдХ рдЪреИрдЯрдмреЙрдЯ рд╣реВрдБ рдЬреЛ рдЖрдкрдХреЛ рдкреНрд░рд╛рд░рдВрднрд┐рдХ рд▓рдХреНрд╖рдг рд╡рд┐рд╢реНрд▓реЗрд╖рдг рдореЗрдВ рдорджрдж рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдмрдирд╛рдпрд╛ рдЧрдпрд╛ рд╣реИред рдХреГрдкрдпрд╛ рдХреБрдЫ рдкреНрд░рд╢реНрдиреЛрдВ рдХреЗ рдЙрддреНрддрд░ рджреЗрдВ рддрд╛рдХрд┐ рдореИрдВ рдЖрдкрдХреА рд╕реНрдерд┐рддрд┐ рдХреЛ рдмреЗрд╣рддрд░ рдврдВрдЧ рд╕реЗ рд╕рдордЭ рд╕рдХреВрдВред",
        "name_label": "рдЖрдкрдХрд╛ рдирд╛рдо рдХреНрдпрд╛ рд╣реИ?",
        "age_label": "рдХреГрдкрдпрд╛ рдЕрдкрдиреА рдЙрдореНрд░ рджрд░реНрдЬ рдХрд░реЗрдВ:",
        "gender_label": "рдЖрдкрдХрд╛ рд▓рд┐рдВрдЧ рдХреНрдпрд╛ рд╣реИ?",
        "gender_options": ["рдкреБрд░реБрд╖", "рдорд╣рд┐рд▓рд╛", "рдЕрдиреНрдп"],
        "symptoms_label": "рдЕрдкрдиреЗ рд▓рдХреНрд╖рдгреЛрдВ рдХрд╛ рд╡рд░реНрдгрди рдХрд░реЗрдВ (рдХрд┐рд╕реА рднреА рднрд╛рд╖рд╛ рдореЗрдВ):",
        "submit_button": "рдЬрдорд╛ рдХрд░реЗрдВ",
        "warning_fill_fields": "рдЬрд╛рд░реА рд░рдЦрдиреЗ рдХреЗ рд▓рд┐рдП рдХреГрдкрдпрд╛ рдЕрдкрдирд╛ рдирд╛рдо рдФрд░ рд▓рдХреНрд╖рдг рджрд░реНрдЬ рдХрд░реЗрдВред",
        "thinking": "рд╕реЛрдЪ рд░рд╣рд╛ рд╣реИ...",
        "detected_symptoms": "тЬЕ рдкрд╣рдЪрд╛рдиреЗ рдЧрдП рд▓рдХреНрд╖рдг: {}",
        "error_no_symptoms": "тЭМ рдХреНрд╖рдорд╛ рдХрд░реЗрдВ, рдореИрдВ рд╡реИрдз рд▓рдХреНрд╖рдгреЛрдВ рдХрд╛ рдкрддрд╛ рдирд╣реАрдВ рд▓рдЧрд╛ рд╕рдХрд╛ред рдХреГрдкрдпрд╛ рдЕрдзрд┐рдХ рд╡рд┐рд╡рд░рдг рдХреЗ рд╕рд╛рде рдкреБрдирдГ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВред",
        "guided_questions_header": "ЁЯдФ рдирд┐рд░реНрджреЗрд╢рд┐рдд рдкреНрд░рд╢реНрди",
        "guided_info": "рдЖрдкрдХреЗ рдкреНрд░рд╛рд░рдВрднрд┐рдХ рд▓рдХреНрд╖рдгреЛрдВ рдХреЗ рдЖрдзрд╛рд░ рдкрд░, рдЖрдкрдХреЛ **{}** рд╣реЛ рд╕рдХрддрд╛ рд╣реИ (рд╡рд┐рд╢реНрд╡рд╛рд╕: {}%)ред",
        "guided_prompt": "рдЕрдзрд┐рдХ рд╕рдЯреАрдХ рдирд┐рджрд╛рди рдкреНрд░рд╛рдкреНрдд рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП, рдХреГрдкрдпрд╛ рдЗрд╕ рд╕реНрдерд┐рддрд┐ рд╕реЗ рд╕рдВрдмрдВрдзрд┐рдд рдХреБрдЫ рдФрд░ рдкреНрд░рд╢реНрдиреЛрдВ рдХреЗ рдЙрддреНрддрд░ рджреЗрдВред",
        "guided_symptom_prompt": "рдХреНрдпрд╛ рдЖрдкрдХреЛ **{}** рднреА рд╣реИ?",
        "guided_button": "рдЕрдВрддрд┐рдо рдирд┐рджрд╛рди рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВ",
        "no_more_questions": "рдкреВрдЫрдиреЗ рдХреЗ рд▓рд┐рдП рдФрд░ рдХреЛрдИ рдкреНрд░рд╢реНрди рдирд╣реАрдВ рд╣реИрдВред рдЕрдкрдиреЗ рдЕрдВрддрд┐рдо рдирд┐рджрд╛рди рдХреЗ рд▓рд┐рдП рдиреАрдЪреЗ рдХреНрд▓рд┐рдХ рдХрд░реЗрдВред",
        "result_header": "тЬи рдирд┐рджрд╛рди рдкрд░рд┐рдгрд╛рдо",
        "diagnosis_sub": "ЁЯй║ рдЖрдкрдХреЗ рдЙрддреНрддрд░реЛрдВ рдХреЗ рдЖрдзрд╛рд░ рдкрд░, рдЖрдкрдХреЛ **{}** рд╣реЛ рд╕рдХрддрд╛ рд╣реИ",
        "confidence_label": "рд╡рд┐рд╢реНрд╡рд╛рд╕ рд╕реНрддрд░",
        "about_sub": "ЁЯУЦ рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ",
        "precautions_sub": "ЁЯЫбя╕П рд╕реБрдЭрд╛рдП рдЧрдП рд╕рд╛рд╡рдзрд╛рдирд┐рдпрд╛рдВ",
        "no_description": "рдХреЛрдИ рд╡рд┐рд╡рд░рдг рдЙрдкрд▓рдмреНрдз рдирд╣реАрдВ рд╣реИред",
        "start_over": "рд╢реБрд░реВ рдХрд░реЗрдВ",
        "thank_you": "рдЪреИрдЯрдмреЙрдЯ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдзрдиреНрдпрд╡рд╛рджред рдЖрдкрдХреЗ рдЕрдЪреНрдЫреЗ рд╕реНрд╡рд╛рд╕реНрдереНрдп рдХреА рдХрд╛рдордирд╛ рдХрд░рддрд╛ рд╣реВрдБ, **{}**!",
        "login_header": "рд▓реЙрдЧрд┐рди",
        "username_label": "рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдирд╛рдо",
        "password_label": "рдкрд╛рд╕рд╡рд░реНрдб",
        "login_button": "рд▓реЙрдЧрд┐рди",
        "login_error": "рдЧрд▓рдд рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдирд╛рдо рдпрд╛ рдкрд╛рд╕рд╡рд░реНрдбред рдХреГрдкрдпрд╛ рдкреБрдирдГ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВред",
        "logout_button": "рд▓реЙрдЧрдЖрдЙрдЯ",
        "play_audio": "ЁЯФК рдирд┐рджрд╛рди рд╕реБрдиреЗрдВ",
    },
    "es": {
        "title": "Chatbot de Salud",
        "intro": "┬бHola! Soy un chatbot dise├▒ado para ayudarte con el an├бlisis preliminar de s├нntomas. Por favor, responde algunas preguntas para que pueda entender mejor tu condici├│n.",
        "name_label": "┬┐Cu├бl es tu nombre?",
        "age_label": "Por favor, ingresa tu edad:",
        "gender_label": "┬┐Cu├бl es tu g├йnero?",
        "gender_options": ["Masculino", "Femenino", "Otro"],
        "symptoms_label": "Describe tus s├нntomas (en cualquier idioma):",
        "submit_button": "Enviar",
        "warning_fill_fields": "Por favor, ingresa tu nombre y s├нntomas para continuar.",
        "thinking": "Pensando...",
        "detected_symptoms": "тЬЕ S├нntomas detectados: {}",
        "error_no_symptoms": "тЭМ Lo siento, no pude detectar s├нntomas v├бlidos. Por favor, int├йntalo de nuevo con m├бs detalles.",
        "guided_questions_header": "ЁЯдФ Preguntas guiadas",
        "guided_info": "Basado en tus s├нntomas iniciales, podr├нas tener **{}** (Confianza: {}%).",
        "guided_prompt": "Para obtener un diagn├│stico m├бs preciso, por favor, responde algunas preguntas m├бs relacionadas con esta condici├│n.",
        "guided_symptom_prompt": "┬┐Tambi├йn tienes **{}**?",
        "guided_button": "Obtener diagn├│stico final",
        "no_more_questions": "No hay m├бs preguntas que hacer. Haz clic a continuaci├│n para tu diagn├│stico final.",
        "result_header": "тЬи Resultado del diagn├│stico",
        "diagnosis_sub": "ЁЯй║ Basado en tus respuestas, podr├нas tener **{}**",
        "confidence_label": "Nivel de confianza",
        "about_sub": "ЁЯУЦ Acerca de",
        "precautions_sub": "ЁЯЫбя╕П Precauciones sugeridas",
        "no_description": "No hay descripci├│n disponible.",
        "start_over": "Empezar de nuevo",
        "thank_you": "Gracias por usar el chatbot. ┬бTe deseo buena salud, **{}**!",
        "login_header": "Iniciar sesi├│n",
        "username_label": "Nombre de usuario",
        "password_label": "Contrase├▒a",
        "login_button": "Iniciar sesi├│n",
        "login_error": "Nombre de usuario o contrase├▒a no v├бlidos. Int├йntalo de nuevo.",
        "logout_button": "Cerrar sesi├│n",
        "play_audio": "ЁЯФК Reproducir diagn├│stico",
    },
    "bn": {
        "title": "рж╕рзНржмрж╛рж╕рзНржерзНржпрж╕рзЗржмрж╛ ржЪрзНржпрж╛ржЯржмржЯ",
        "intro": "ржиржорж╕рзНржХрж╛рж░! ржЖржорж┐ ржПржХржЯрж┐ ржЪрзНржпрж╛ржЯржмржЯ ржпрж╛ ржЖржкржирж╛ржХрзЗ ржкрзНрж░рж╛ржержорж┐ржХ рж▓ржХрзНрж╖ржг ржмрж┐рж╢рзНрж▓рзЗрж╖ржгрзЗ рж╕рж╣рж╛ржпрж╝рждрж╛ ржХрж░рж╛рж░ ржЬржирзНржп ржбрж┐ржЬрж╛ржЗржи ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗред ржЖржорж┐ ржЖржкржирж╛рж░ ржЕржмрж╕рзНржерж╛ ржЖрж░ржУ ржнрж╛рж▓рзЛржнрж╛ржмрзЗ ржмрзБржЭрждрзЗ ржкрж╛рж░рж┐, рждрж╛ржЗ ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржХржпрж╝рзЗржХржЯрж┐ ржкрзНрж░рж╢рзНржирзЗрж░ ржЙрждрзНрждрж░ ржжрж┐ржиред",
        "name_label": "ржЖржкржирж╛рж░ ржирж╛ржо ржХрж┐?",
        "age_label": "ржЖржкржирж╛рж░ ржмржпрж╝рж╕ рж▓рж┐ржЦрзБржи:",
        "gender_label": "ржЖржкржирж╛рж░ рж▓рж┐ржЩрзНржЧ ржХрж┐?",
        "gender_options": ["ржкрзБрж░рзБрж╖", "ржорж╣рж┐рж▓рж╛", "ржЕржирзНржпрж╛ржирзНржп"],
        "symptoms_label": "ржЖржкржирж╛рж░ рж▓ржХрзНрж╖ржгржЧрзБрж▓рж┐ ржмрж░рзНржгржирж╛ ржХрж░рзБржи (ржпрзЗ ржХрзЛржирзЛ ржнрж╛рж╖рж╛ржпрж╝):",
        "submit_button": "ржЬржорж╛ ржжрж┐ржи",
        "warning_fill_fields": "ржЪрж╛рж▓рж┐ржпрж╝рзЗ ржпрзЗрждрзЗ, ржЖржкржирж╛рж░ ржирж╛ржо ржПржмржВ рж▓ржХрзНрж╖ржг рж▓рж┐ржЦрзБржиред",
        "thinking": "ржЪрж┐ржирзНрждрж╛ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ...",
        "detected_symptoms": "тЬЕ рж╕ржирж╛ржХрзНржд ржХрж░рж╛ рж▓ржХрзНрж╖ржг: {}",
        "error_no_symptoms": "тЭМ ржжрзБржГржЦрж┐ржд, ржЖржорж┐ ржХрзЛржирзЛ ржмрзИржз рж▓ржХрзНрж╖ржг рж╕ржирж╛ржХрзНржд ржХрж░рждрзЗ ржкрж╛рж░рж┐ржирж┐ред ржжржпрж╝рж╛ ржХрж░рзЗ ржЖрж░ржУ ржмрж┐рж╕рзНрждрж╛рж░рж┐ржд рждржерзНржп ржжрж┐ржпрж╝рзЗ ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред",
        "guided_questions_header": "ЁЯдФ ржирж┐рж░рзНржжрзЗрж╢рж┐ржд ржкрзНрж░рж╢рзНржирж╛ржмрж▓рзА",
        "guided_info": "ржЖржкржирж╛рж░ ржкрзНрж░рж╛ржержорж┐ржХ рж▓ржХрзНрж╖ржгрзЗрж░ ржЙржкрж░ ржнрж┐рждрзНрждрж┐ ржХрж░рзЗ, ржЖржкржирж╛рж░ **{}** ржерж╛ржХрждрзЗ ржкрж╛рж░рзЗ (ржЖрждрзНржоржмрж┐рж╢рзНржмрж╛рж╕: {}%)ред",
        "guided_prompt": "ржЖрж░ржУ ржирж┐рж░рзНржнрзБрж▓ рж░рзЛржЧ ржирж┐рж░рзНржгржпрж╝рзЗрж░ ржЬржирзНржп, ржжржпрж╝рж╛ ржХрж░рзЗ ржПржЗ ржЕржмрж╕рзНржерж╛ рж╕ржорзНржкрж░рзНржХрж┐ржд ржЖрж░ржУ ржХрж┐ржЫрзБ ржкрзНрж░рж╢рзНржирзЗрж░ ржЙрждрзНрждрж░ ржжрж┐ржиред",
        "guided_symptom_prompt": "ржЖржкржирж╛рж░ ржХрж┐ **{}**ржУ ржЖржЫрзЗ?",
        "guided_button": "ржЪрзВржбрж╝рж╛ржирзНржд ржирж┐рж░рзНржгржпрж╝ ржкрж╛ржи",
        "no_more_questions": "ржЖрж░ ржХрзЛржирзЛ ржкрзНрж░рж╢рзНржи ржХрж░рж╛рж░ ржирзЗржЗред ржЖржкржирж╛рж░ ржЪрзВржбрж╝рж╛ржирзНржд ржирж┐рж░рзНржгржпрж╝рзЗрж░ ржЬржирзНржп ржирж┐ржЪрзЗ ржХрзНрж▓рж┐ржХ ржХрж░рзБржиред",
        "result_header": "тЬи рж░рзЛржЧ ржирж┐рж░рзНржгржпрж╝рзЗрж░ ржлрж▓рж╛ржлрж▓",
        "diagnosis_sub": "ЁЯй║ ржЖржкржирж╛рж░ ржЙрждрзНрждрж░рзЗрж░ ржЙржкрж░ ржнрж┐рждрзНрждрж┐ ржХрж░рзЗ, ржЖржкржирж╛рж░ **{}** ржерж╛ржХрждрзЗ ржкрж╛рж░рзЗ",
        "confidence_label": "ржЖрждрзНржоржмрж┐рж╢рзНржмрж╛рж╕рзЗрж░ рж╕рзНрждрж░",
        "about_sub": "ЁЯУЦ рж╕ржорзНржкрж░рзНржХрзЗ",
        "precautions_sub": "ЁЯЫбя╕П ржкрзНрж░рж╕рзНрждрж╛ржмрж┐ржд рж╕рждрж░рзНржХрждрж╛",
        "no_description": "ржХрзЛржирзЛ ржмрж░рзНржгржирж╛ ржирзЗржЗред",
        "start_over": "ржЖржмрж╛рж░ рж╢рзБрж░рзБ ржХрж░рзБржи",
        "thank_you": "ржЪрзНржпрж╛ржЯржмржЯ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛рж░ ржЬржирзНржп ржЖржкржирж╛ржХрзЗ ржзржирзНржпржмрж╛ржжред ржЖржкржирж╛рж░ рж╕рзБрж╕рзНржмрж╛рж╕рзНржерзНржп ржХрж╛ржоржирж╛ ржХрж░рж┐, **{}**!",
        "login_header": "рж▓ржЧржЗржи",
        "username_label": "ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзАрж░ ржирж╛ржо",
        "password_label": "ржкрж╛рж╕ржУржпрж╝рж╛рж░рзНржб",
        "login_button": "рж▓ржЧржЗржи",
        "login_error": "ржнрзБрж▓ ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзАрж░ ржирж╛ржо ржмрж╛ ржкрж╛рж╕ржУржпрж╝рж╛рж░рзНржбред ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред",
        "logout_button": "рж▓ржЧржЖржЙржЯ",
        "play_audio": "ЁЯФК рж░рзЛржЧ ржирж┐рж░рзНржгржпрж╝ рж╢рзЛржирж╛ржи",
    },
    "kn": {
        "title": "р▓Жр▓░р│Лр▓Чр│Нр▓п р▓░р▓Хр│Нр▓╖р▓гр▓╛ р▓Ър▓╛р▓Яр│НтАМр▓мр▓╛р▓Яр│Н",
        "intro": "р▓ир▓ор▓╕р│Нр▓Хр▓╛р▓░! р▓ир▓╛р▓ир│Б р▓кр│Нр▓░р▓╛р▓ер▓ор▓┐р▓Х р▓░р│Лр▓Чр▓▓р▓Хр│Нр▓╖р▓гр▓Чр▓│ р▓╡р▓┐р▓╢р│Нр▓▓р│Зр▓╖р▓гр│Жр▓пр▓▓р│Нр▓▓р▓┐ р▓ир▓┐р▓ор▓Чр│Ж р▓╕р▓╣р▓╛р▓п р▓ор▓╛р▓бр▓▓р│Б р▓╡р▓┐р▓ир│Нр▓пр▓╛р▓╕р▓Чр│Кр▓│р▓┐р▓╕р▓▓р▓╛р▓ж р▓Тр▓Вр▓жр│Б р▓Ър▓╛р▓Яр│НтАМр▓мр▓╛р▓Яр│Н. р▓жр▓пр▓╡р▓┐р▓Яр│Нр▓Яр│Б р▓ир▓┐р▓ор│Нр▓о р▓╕р│Нр▓ер▓┐р▓др▓┐р▓пр▓ир│Нр▓ир│Б р▓ир▓╛р▓ир│Б р▓Йр▓др│Нр▓др▓ор▓╡р▓╛р▓Чр▓┐ р▓Ер▓░р│Нр▓ер▓ор▓╛р▓бр▓┐р▓Хр│Кр▓│р│Нр▓│р▓▓р│Б р▓Хр│Жр▓▓р▓╡р│Б р▓кр│Нр▓░р▓╢р│Нр▓ир│Жр▓Чр▓│р▓┐р▓Чр│Ж р▓Йр▓др│Нр▓др▓░р▓┐р▓╕р▓┐.",
        "name_label": "р▓ир▓┐р▓ор│Нр▓о р▓╣р│Жр▓╕р▓░р│Зр▓ир│Б?",
        "age_label": "р▓жр▓пр▓╡р▓┐р▓Яр│Нр▓Яр│Б р▓ир▓┐р▓ор│Нр▓о р▓╡р▓пр▓╕р│Нр▓╕р▓ир│Нр▓ир│Б р▓ир▓ор│Вр▓жр▓┐р▓╕р▓┐:",
        "gender_label": "р▓ир▓┐р▓ор│Нр▓о р▓▓р▓┐р▓Вр▓Ч р▓пр▓╛р▓╡р│Бр▓жр│Б?",
        "gender_options": ["р▓кр│Бр▓░р│Бр▓╖", "р▓ор▓╣р▓┐р▓│р│Ж", "р▓Зр▓др▓░"],
        "symptoms_label": "р▓ир▓┐р▓ор│Нр▓о р▓░р│Лр▓Чр▓▓р▓Хр│Нр▓╖р▓гр▓Чр▓│р▓ир│Нр▓ир│Б р▓╡р▓┐р▓╡р▓░р▓┐р▓╕р▓┐ (р▓пр▓╛р▓╡р│Бр▓жр│З р▓нр▓╛р▓╖р│Жр▓пр▓▓р│Нр▓▓р▓┐):",
        "submit_button": "р▓╕р▓▓р│Нр▓▓р▓┐р▓╕р│Б",
        "warning_fill_fields": "р▓ор│Бр▓Вр▓жр│Бр▓╡р▓░р▓┐р▓пр▓▓р│Б р▓жр▓пр▓╡р▓┐р▓Яр│Нр▓Яр│Б р▓ир▓┐р▓ор│Нр▓о р▓╣р│Жр▓╕р▓░р│Б р▓ор▓др│Нр▓др│Б р▓░р│Лр▓Чр▓▓р▓Хр│Нр▓╖р▓гр▓Чр▓│р▓ир│Нр▓ир│Б р▓ир▓ор│Вр▓жр▓┐р▓╕р▓┐.",
        "thinking": "р▓Жр▓▓р│Лр▓Ър▓┐р▓╕р│Бр▓др│Нр▓др▓┐р▓жр│Ж...",
        "detected_symptoms": "тЬЕ р▓кр▓др│Нр▓др│Жр▓пр▓╛р▓ж р▓░р│Лр▓Чр▓▓р▓Хр│Нр▓╖р▓гр▓Чр▓│р│Б: {}",
        "error_no_symptoms": "тЭМ р▓Хр│Нр▓╖р▓ор▓┐р▓╕р▓┐, р▓ир▓╛р▓ир│Б р▓╕р▓░р▓┐р▓пр▓╛р▓ж р▓░р│Лр▓Чр▓▓р▓Хр│Нр▓╖р▓гр▓Чр▓│р▓ир│Нр▓ир│Б р▓кр▓др│Нр▓др│Жр▓╣р▓Ър│Нр▓Ър▓▓р│Б р▓╕р▓╛р▓зр│Нр▓пр▓╡р▓╛р▓Чр▓▓р▓┐р▓▓р│Нр▓▓. р▓жр▓пр▓╡р▓┐р▓Яр│Нр▓Яр│Б р▓╣р│Жр▓Ър│Нр▓Ър▓┐р▓и р▓╡р▓┐р▓╡р▓░р▓Чр▓│р│Кр▓Вр▓жр▓┐р▓Чр│Ж р▓ор▓др│Нр▓др│Кр▓ор│Нр▓ор│Ж р▓кр│Нр▓░р▓пр▓др│Нр▓ир▓┐р▓╕р▓┐.",
        "guided_questions_header": "ЁЯдФ р▓ор▓╛р▓░р│Нр▓Чр▓жр▓░р│Нр▓╢р▓┐ р▓кр│Нр▓░р▓╢р│Нр▓ир│Жр▓Чр▓│р│Б",
        "guided_info": "р▓ир▓┐р▓ор│Нр▓о р▓Жр▓░р▓Вр▓нр▓┐р▓Х р▓░р│Лр▓Чр▓▓р▓Хр│Нр▓╖р▓гр▓Чр▓│ р▓Жр▓зр▓╛р▓░р▓ж р▓ор│Зр▓▓р│Ж, р▓ир▓┐р▓ор▓Чр│Ж **{}** р▓Зр▓░р▓мр▓╣р│Бр▓жр│Б (р▓╡р▓┐р▓╢р│Нр▓╡р▓╛р▓╕р▓╛р▓░р│Нр▓╣р▓др│Ж: {}%).",
        "guided_prompt": "р▓╣р│Жр▓Ър│Нр▓Ър│Б р▓ир▓┐р▓Цр▓░р▓╡р▓╛р▓ж р▓░р│Лр▓Чр▓ир▓┐р▓░р│Нр▓гр▓пр▓╡р▓ир│Нр▓ир│Б р▓кр▓бр│Жр▓пр▓▓р│Б, р▓жр▓пр▓╡р▓┐р▓Яр│Нр▓Яр│Б р▓И р▓╕р│Нр▓ер▓┐р▓др▓┐р▓Чр│Ж р▓╕р▓Вр▓мр▓Вр▓зр▓┐р▓╕р▓┐р▓ж р▓Хр│Жр▓▓р▓╡р│Б р▓╣р│Жр▓Ър│Нр▓Ър│Бр▓╡р▓░р▓┐ р▓кр│Нр▓░р▓╢р│Нр▓ир│Жр▓Чр▓│р▓┐р▓Чр│Ж р▓Йр▓др│Нр▓др▓░р▓┐р▓╕р▓┐.",
        "guided_symptom_prompt": "р▓ир▓┐р▓ор▓Чр│Ж **{}** р▓Хр│Вр▓б р▓Зр▓жр│Жр▓пр│З?",
        "guided_button": "р▓Ер▓Вр▓др▓┐р▓о р▓нр▓╡р▓┐р▓╖р│Нр▓п р▓кр▓бр│Жр▓пр▓┐р▓░р▓┐",
        "no_more_questions": "р▓Хр│Зр▓│р▓▓р│Б р▓пр▓╛р▓╡р│Бр▓жр│З р▓╣р│Жр▓Ър│Нр▓Ър▓┐р▓и р▓кр│Нр▓░р▓╢р│Нр▓ир│Жр▓Чр▓│р▓┐р▓▓р│Нр▓▓. р▓ир▓┐р▓ор│Нр▓о р▓Ер▓Вр▓др▓┐р▓о р▓░р│Лр▓Чр▓ир▓┐р▓░р│Нр▓гр▓пр▓Хр│Нр▓Хр▓╛р▓Чр▓┐ р▓Хр│Жр▓│р▓Чр│Ж р▓Хр│Нр▓▓р▓┐р▓Хр│Н р▓ор▓╛р▓бр▓┐.",
        "result_header": "тЬи р▓░р│Лр▓Чр▓ир▓┐р▓░р│Нр▓гр▓пр▓ж р▓лр▓▓р▓┐р▓др▓╛р▓Вр▓╢",
        "diagnosis_sub": "ЁЯй║ р▓ир▓┐р▓ор│Нр▓о р▓Йр▓др│Нр▓др▓░р▓Чр▓│ р▓Жр▓зр▓╛р▓░р▓ж р▓ор│Зр▓▓р│Ж, р▓ир▓┐р▓ор▓Чр│Ж **{}** р▓Зр▓░р▓мр▓╣р│Бр▓жр│Б",
        "confidence_label": "р▓╡р▓┐р▓╢р│Нр▓╡р▓╛р▓╕р▓╛р▓░р│Нр▓╣р▓др│Жр▓п р▓ор▓Яр│Нр▓Я",
        "about_sub": "ЁЯУЦ р▓мр▓Чр│Нр▓Чр│Ж",
        "precautions_sub": "ЁЯЫбя╕П р▓╕р│Вр▓Ър▓┐р▓╕р▓┐р▓ж р▓ор│Бр▓ир│Нр▓ир│Жр▓Ър│Нр▓Ър▓░р▓┐р▓Хр│Жр▓Чр▓│р│Б",
        "no_description": "р▓пр▓╛р▓╡р│Бр▓жр│З р▓╡р▓┐р▓╡р▓░р▓гр│Ж р▓▓р▓нр│Нр▓пр▓╡р▓┐р▓▓р│Нр▓▓.",
        "start_over": "р▓ор▓др│Нр▓др│Ж р▓кр│Нр▓░р▓╛р▓░р▓Вр▓нр▓┐р▓╕р│Б",
        "thank_you": "р▓Ър▓╛р▓Яр│НтАМр▓мр▓╛р▓Яр│Н р▓мр▓│р▓╕р▓┐р▓жр▓Хр│Нр▓Хр▓╛р▓Чр▓┐ р▓зр▓ир│Нр▓пр▓╡р▓╛р▓жр▓Чр▓│р│Б. р▓ир▓┐р▓ор▓Чр│Ж р▓Йр▓др│Нр▓др▓о р▓Жр▓░р│Лр▓Чр│Нр▓п р▓╣р▓╛р▓░р│Ир▓╕р│Бр▓др│Нр▓др│Зр▓ир│Ж, **{}**!",
        "login_header": "р▓▓р▓╛р▓Чр│Н р▓Зр▓ир│Н р▓ор▓╛р▓бр▓┐",
        "username_label": "р▓мр▓│р▓Хр│Жр▓жр▓╛р▓░ р▓╣р│Жр▓╕р▓░р│Б",
        "password_label": "р▓кр▓╛р▓╕р│Нр▓╡р▓░р│Нр▓бр│Н",
        "login_button": "р▓▓р▓╛р▓Чр│Н р▓Зр▓ир│Н р▓ор▓╛р▓бр▓┐",
        "login_error": "р▓Ер▓ор▓╛р▓ир│Нр▓п р▓мр▓│р▓Хр│Жр▓жр▓╛р▓░ р▓╣р│Жр▓╕р▓░р│Б р▓Ер▓ер▓╡р▓╛ р▓кр▓╛р▓╕р│Нр▓╡р▓░р│Нр▓бр│Н. р▓жр▓пр▓╡р▓┐р▓Яр│Нр▓Яр│Б р▓ор▓др│Нр▓др│Кр▓ор│Нр▓ор│Ж р▓кр│Нр▓░р▓пр▓др│Нр▓ир▓┐р▓╕р▓┐.",
        "logout_button": "р▓▓р▓╛р▓Чр│Н р▓Фр▓Яр│Н р▓ор▓╛р▓бр▓┐",
        "play_audio": "ЁЯФК р▓░р│Лр▓Чр▓ир▓┐р▓░р│Нр▓гр▓п р▓Хр│Зр▓│р▓┐",
    },
    "gu": {
        "title": "рк╣рлЗрк▓рлНркеркХрлЗрк░ ркЪрлЗркЯркмрлЛркЯ",
        "intro": "ркиркорк╕рлНркХрк╛рк░! рк╣рлБркВ ркПркХ ркЪрлЗркЯркмрлЛркЯ ркЫрлБркВ ркЬрлЗ ркдркоркирлЗ рккрлНрк░рк╛ркеркорк┐ркХ рк▓ркХрлНрк╖ркг рк╡рк┐рк╢рлНрк▓рлЗрк╖ркгркорк╛ркВ ркоркжркж ркХрк░рк╡рк╛ ркорк╛ркЯрлЗ ркбрк┐ркЭрк╛ркЗрки ркХрк░рк╡рк╛ркорк╛ркВ ркЖрк╡рлНркпрлЛ ркЫрлЗ. ркХрлГрккрк╛ ркХрк░рлАркирлЗ ркерлЛркбрк╛ рккрлНрк░рк╢рлНркирлЛркирк╛ ркЬрк╡рк╛ркм ркЖрккрлЛ ркЬрлЗркерлА рк╣рлБркВ ркдркорк╛рк░рлА рк╕рлНркерк┐ркдрк┐ркирлЗ рк╡ркзрлБ рк╕рк╛рк░рлА рк░рлАркдрлЗ рк╕ркоркЬрлА рк╢ркХрлБркВ.",
        "name_label": "ркдркорк╛рк░рлБркВ ркирк╛рко рк╢рлБркВ ркЫрлЗ?",
        "age_label": "ркХрлГрккрк╛ ркХрк░рлАркирлЗ ркдркорк╛рк░рлА ркЙркВркорк░ ркжрк╛ркЦрк▓ ркХрк░рлЛ:",
        "gender_label": "ркдркорк╛рк░рлБркВ рк▓рк┐ркВркЧ рк╢рлБркВ ркЫрлЗ?",
        "gender_options": ["рккрлБрк░рлБрк╖", "рк╕рлНркдрлНрк░рлА", "ркЕркирлНркп"],
        "symptoms_label": "ркдркорк╛рк░рк╛ рк▓ркХрлНрк╖ркгрлЛркирлБркВ рк╡рк░рлНркгрки ркХрк░рлЛ (ркХрлЛркИрккркг ркнрк╛рк╖рк╛ркорк╛ркВ):",
        "submit_button": "рк╕ркмркорк┐ркЯ ркХрк░рлЛ",
        "warning_fill_fields": "ркХрлГрккрк╛ ркХрк░рлАркирлЗ ркЪрк╛рк▓рлБ рк░рк╛ркЦрк╡рк╛ ркорк╛ркЯрлЗ ркдркорк╛рк░рлБркВ ркирк╛рко ркЕркирлЗ рк▓ркХрлНрк╖ркгрлЛ ркжрк╛ркЦрк▓ ркХрк░рлЛ.",
        "thinking": "рк╡рк┐ркЪрк╛рк░ркгрк╛ ркХрк░рлА рк░рк╣рлНркпрлБркВ ркЫрлЗ...",
        "detected_symptoms": "тЬЕ ркорк│рлЗрк▓рк╛ рк▓ркХрлНрк╖ркгрлЛ: {}",
        "error_no_symptoms": "тЭМ ркорк╛ркл ркХрк░рк╢рлЛ, рк╣рлБркВ ркорк╛ркирлНркп рк▓ркХрлНрк╖ркгрлЛ рк╢рлЛркзрлА рк╢ркХрлНркпрлЛ ркиркерлА. ркХрлГрккрк╛ ркХрк░рлАркирлЗ рк╡ркзрлБ рк╡рк┐ркЧркдрлЛ рк╕рк╛ркерлЗ рклрк░рлАркерлА рккрлНрк░ркпрк╛рк╕ ркХрк░рлЛ.",
        "guided_questions_header": "ЁЯдФ ркорк╛рк░рлНркЧркжрк░рлНрк╢рк┐ркд рккрлНрк░рк╢рлНркирлЛ",
        "guided_info": "ркдркорк╛рк░рк╛ рккрлНрк░рк╛рк░ркВркнрк┐ркХ рк▓ркХрлНрк╖ркгрлЛркирк╛ ркЖркзрк╛рк░рлЗ, ркдркоркирлЗ **{}** рк╣рлЛркИ рк╢ркХрлЗ ркЫрлЗ (рк╡рк┐рк╢рлНрк╡рк╛рк╕: {}%).",
        "guided_prompt": "рк╡ркзрлБ рк╕ркЪрлЛркЯ ркирк┐ркжрк╛рки ркорлЗрк│рк╡рк╡рк╛ ркорк╛ркЯрлЗ, ркХрлГрккрк╛ ркХрк░рлАркирлЗ ркЖ рк╕рлНркерк┐ркдрк┐ рк╕ркВркмркВркзрк┐ркд ркерлЛркбрк╛ рк╡ркзрлБ рккрлНрк░рк╢рлНркирлЛркирк╛ ркЬрк╡рк╛ркм ркЖрккрлЛ.",
        "guided_symptom_prompt": "рк╢рлБркВ ркдркоркирлЗ **{}** рккркг ркЫрлЗ?",
        "guided_button": "ркЕркВркдрк┐рко ркирк┐ркжрк╛рки ркорлЗрк│рк╡рлЛ",
        "no_more_questions": "рккрлВркЫрк╡рк╛ ркорк╛ркЯрлЗ ркЕркирлНркп ркХрлЛркИ рккрлНрк░рк╢рлНркирлЛ ркиркерлА. ркдркорк╛рк░рк╛ ркЕркВркдрк┐рко ркирк┐ркжрк╛рки ркорк╛ркЯрлЗ ркирлАркЪрлЗ ркХрлНрк▓рк┐ркХ ркХрк░рлЛ.",
        "result_header": "тЬи ркирк┐ркжрк╛рки рккрк░рк┐ркгрк╛рко",
        "diagnosis_sub": "ЁЯй║ ркдркорк╛рк░рк╛ ркЬрк╡рк╛ркмрлЛркирк╛ ркЖркзрк╛рк░рлЗ, ркдркоркирлЗ **{}** рк╣рлЛркИ рк╢ркХрлЗ ркЫрлЗ",
        "confidence_label": "рк╡рк┐рк╢рлНрк╡рк╛рк╕ рк╕рлНркдрк░",
        "about_sub": "ЁЯУЦ рк╡рк┐рк╢рлЗ",
        "precautions_sub": "ЁЯЫбя╕П рк╕рлВркЪрк╡рлЗрк▓ рк╕рк╛рк╡ркЪрлЗркдрлАркУ",
        "no_description": "ркХрлЛркИ рк╡рк░рлНркгрки ркЙрккрк▓ркмрлНркз ркиркерлА.",
        "start_over": "рклрк░рлА рк╢рк░рлВ ркХрк░рлЛ",
        "thank_you": "ркЪрлЗркЯркмрлЛркЯркирлЛ ркЙрккркпрлЛркЧ ркХрк░рк╡рк╛ ркмркжрк▓ ркЖркнрк╛рк░. ркдркорк╛рк░рк╛ рк╕рк╛рк░рк╛ рк╕рлНрк╡рк╛рк╕рлНркерлНркпркирлА рк╢рлБркнрлЗркЪрлНркЫрк╛, **{}**!",
        "login_header": "рк▓рлЙркЧрк┐рки",
        "username_label": "рк╡рккрк░рк╛рк╢ркХрк░рлНркдрк╛ ркирк╛рко",
        "password_label": "рккрк╛рк╕рк╡рк░рлНркб",
        "login_button": "рк▓рлЙркЧрк┐рки",
        "login_error": "ркЕркорк╛ркирлНркп рк╡рккрк░рк╛рк╢ркХрк░рлНркдрк╛ ркирк╛рко ркЕркерк╡рк╛ рккрк╛рк╕рк╡рк░рлНркб. ркХрлГрккрк╛ ркХрк░рлАркирлЗ рклрк░рлАркерлА рккрлНрк░ркпрк╛рк╕ ркХрк░рлЛ.",
        "logout_button": "рк▓рлЙркЧркЖркЙркЯ",
        "play_audio": "ЁЯФК ркирк┐ркжрк╛рки рк╕рк╛ркВркнрк│рлЛ",
    },
    "ml": {
        "title": "р┤Жр┤░р╡Лр┤Чр╡Нр┤п р┤╕р┤Вр┤░р┤Хр╡Нр┤╖р┤гр┤В р┤Ър┤╛р┤▒р╡Нр┤▒р╡Нр┤мр╡Лр┤Яр╡Нр┤Яр╡Н",
        "intro": "р┤ир┤ор┤╕р╡Нр┤Хр┤╛р┤░р┤В! р┤кр╡Нр┤░р┤╛р┤ер┤ор┤┐р┤Х р┤░р╡Лр┤Чр┤ир┤┐р╡╝р┤гр┤п р┤╡р┤┐р┤╢р┤Хр┤▓р┤ир┤др╡Нр┤др┤┐р┤ир╡Н р┤ир┤┐р┤Щр╡Нр┤Щр┤│р╡Ж р┤╕р┤╣р┤╛р┤пр┤┐р┤Хр╡Нр┤Хр┤╛р╡╗ р┤░р╡Вр┤кр┤Хр╡╜р┤кр╡Нр┤кр┤и р┤Ър╡Жр┤пр╡Нр┤д р┤Тр┤░р╡Б р┤Ър┤╛р┤▒р╡Нр┤▒р╡Нр┤мр╡Лр┤Яр╡Нр┤Яр┤╛р┤гр╡Н р┤Юр┤╛р╡╗. р┤ир┤┐р┤Щр╡Нр┤Щр┤│р╡Бр┤Яр╡Ж р┤Ер┤╡р┤╕р╡Нр┤е р┤ир┤ир╡Нр┤ир┤╛р┤пр┤┐ р┤ор┤ир┤╕р╡Нр┤╕р┤┐р┤▓р┤╛р┤Хр╡Нр┤Хр┤╛р╡╗ р┤жр┤пр┤╡р┤╛р┤пр┤┐ р┤Хр╡Бр┤▒р┤Ър╡Нр┤Ър╡Н р┤Ър╡Лр┤жр╡Нр┤пр┤Щр╡Нр┤Щр╡╛р┤Хр╡Нр┤Хр╡Н р┤Йр┤др╡Нр┤др┤░р┤В р┤ир╡╜р┤Хр╡Бр┤Х.",
        "name_label": "р┤ир┤┐р┤Щр╡Нр┤Щр┤│р╡Бр┤Яр╡Ж р┤кр╡Зр┤░р╡Жр┤ир╡Нр┤др┤╛р┤гр╡Н?",
        "age_label": "р┤жр┤пр┤╡р┤╛р┤пр┤┐ р┤ир┤┐р┤Щр╡Нр┤Щр┤│р╡Бр┤Яр╡Ж р┤кр╡Нр┤░р┤╛р┤пр┤В р┤ир╡╜р┤Хр╡Бр┤Х:",
        "gender_label": "р┤ир┤┐р┤Щр╡Нр┤Щр┤│р╡Бр┤Яр╡Ж р┤▓р┤┐р┤Вр┤Чр┤В р┤Ор┤ир╡Нр┤др┤╛р┤гр╡Н?",
        "gender_options": ["р┤кр╡Бр┤░р╡Бр┤╖р╡╗", "р┤╕р╡Нр┤др╡Нр┤░р╡А", "р┤ор┤▒р╡Нр┤▒р╡Бр┤│р╡Нр┤│р┤╡"],
        "symptoms_label": "р┤ир┤┐р┤Щр╡Нр┤Щр┤│р╡Бр┤Яр╡Ж р┤▓р┤Хр╡Нр┤╖р┤гр┤Щр╡Нр┤Щр╡╛ р┤╡р┤┐р┤╡р┤░р┤┐р┤Хр╡Нр┤Хр╡Бр┤Х (р┤Пр┤др╡Н р┤нр┤╛р┤╖р┤пр┤┐р┤▓р╡Бр┤В):",
        "submit_button": "р┤╕р┤ор╡╝р┤кр╡Нр┤кр┤┐р┤Хр╡Нр┤Хр╡Бр┤Х",
        "warning_fill_fields": "р┤др╡Бр┤Яр┤░р┤╛р╡╗, р┤ир┤┐р┤Щр╡Нр┤Щр┤│р╡Бр┤Яр╡Ж р┤кр╡Зр┤░р╡Бр┤В р┤▓р┤Хр╡Нр┤╖р┤гр┤Щр╡Нр┤Щр┤│р╡Бр┤В р┤ир╡╜р┤Хр╡Бр┤Х.",
        "thinking": "р┤Ър┤┐р┤ир╡Нр┤др┤┐р┤Хр╡Нр┤Хр╡Бр┤ир╡Нр┤ир╡Б...",
        "detected_symptoms": "тЬЕ р┤Хр┤гр╡Нр┤Яр╡Жр┤др╡Нр┤др┤┐р┤п р┤▓р┤Хр╡Нр┤╖р┤гр┤Щр╡Нр┤Щр╡╛: {}",
        "error_no_symptoms": "тЭМ р┤Хр╡Нр┤╖р┤ор┤┐р┤Хр╡Нр┤Хр┤гр┤В, р┤Ор┤ир┤┐р┤Хр╡Нр┤Хр╡Н р┤╕р┤╛р┤зр╡Бр┤╡р┤╛р┤п р┤▓р┤Хр╡Нр┤╖р┤гр┤Щр╡Нр┤Щр╡╛ р┤Хр┤гр╡Нр┤Яр╡Жр┤др╡Нр┤др┤╛р╡╗ р┤Хр┤┤р┤┐р┤Юр╡Нр┤Юр┤┐р┤▓р╡Нр┤▓. р┤Хр╡Вр┤Яр╡Бр┤др╡╜ р┤╡р┤┐р┤╡р┤░р┤Щр╡Нр┤Щр╡╛ р┤ир╡╜р┤Хр┤┐ р┤╡р╡Ар┤гр╡Нр┤Яр╡Бр┤В р┤╢р╡Нр┤░р┤ор┤┐р┤Хр╡Нр┤Хр╡Бр┤Х.",
        "guided_questions_header": "ЁЯдФ р┤ор┤╛р╡╝р┤Чр╡Нр┤Чр┤ир┤┐р╡╝р┤жр╡Нр┤жр╡Зр┤╢ р┤Ър╡Лр┤жр╡Нр┤пр┤Щр╡Нр┤Щр╡╛",
        "guided_info": "р┤ир┤┐р┤Щр╡Нр┤Щр┤│р╡Бр┤Яр╡Ж р┤кр╡Нр┤░р┤╛р┤ер┤ор┤┐р┤Х р┤▓р┤Хр╡Нр┤╖р┤гр┤Щр╡Нр┤Щр┤│р╡Ж р┤Ер┤Яр┤┐р┤╕р╡Нр┤ер┤╛р┤ир┤ор┤╛р┤Хр╡Нр┤Хр┤┐, р┤ир┤┐р┤Щр╡Нр┤Щр╡╛р┤Хр╡Нр┤Хр╡Н **{}** р┤Йр┤гр╡Нр┤Яр┤╛р┤Хр┤╛р╡╗ р┤╕р┤╛р┤зр╡Нр┤пр┤др┤пр╡Бр┤гр╡Нр┤Яр╡Н (р┤╡р┤┐р┤╢р╡Нр┤╡р┤╛р┤╕р╡Нр┤пр┤д: {}%).",
        "guided_prompt": "р┤Хр╡Вр┤Яр╡Бр┤др╡╜ р┤Хр╡Гр┤др╡Нр┤пр┤ор┤╛р┤п р┤░р╡Лр┤Чр┤ир┤┐р╡╝р┤гр┤пр┤В р┤▓р┤нр┤┐р┤Хр╡Нр┤Хр╡Бр┤ир╡Нр┤ир┤др┤┐р┤ир╡Н, р┤И р┤Ер┤╡р┤╕р╡Нр┤ер┤пр╡Бр┤ор┤╛р┤пр┤┐ р┤мр┤ир╡Нр┤зр┤кр╡Нр┤кр╡Жр┤Яр╡Нр┤Я р┤Хр╡Вр┤Яр╡Бр┤др╡╜ р┤Ър╡Лр┤жр╡Нр┤пр┤Щр╡Нр┤Щр╡╛р┤Хр╡Нр┤Хр╡Н р┤Йр┤др╡Нр┤др┤░р┤В р┤ир╡╜р┤Хр╡Бр┤Х.",
        "guided_symptom_prompt": "р┤ир┤┐р┤Щр╡Нр┤Щр╡╛р┤Хр╡Нр┤Хр╡Н **{}**р┤Йр┤В р┤Йр┤гр╡Нр┤Яр╡Л?",
        "guided_button": "р┤Ер┤ир╡Нр┤др┤┐р┤о р┤░р╡Лр┤Чр┤ир┤┐р╡╝р┤гр┤пр┤В р┤ир╡Зр┤Яр╡Бр┤Х",
        "no_more_questions": "р┤Ър╡Лр┤жр┤┐р┤Хр╡Нр┤Хр┤╛р╡╗ р┤Хр╡Вр┤Яр╡Бр┤др╡╜ р┤Ър╡Лр┤жр╡Нр┤пр┤Щр╡Нр┤Щр┤│р┤┐р┤▓р╡Нр┤▓. р┤ир┤┐р┤Щр╡Нр┤Щр┤│р╡Бр┤Яр╡Ж р┤Ер┤ир╡Нр┤др┤┐р┤о р┤░р╡Лр┤Чр┤ир┤┐р╡╝р┤гр┤пр┤др╡Нр┤др┤┐р┤ир┤╛р┤пр┤┐ р┤др┤╛р┤┤р╡Ж р┤Хр╡Нр┤▓р┤┐р┤Хр╡Нр┤Хр╡Н р┤Ър╡Жр┤пр╡Нр┤пр╡Бр┤Х.",
        "result_header": "тЬи р┤░р╡Лр┤Чр┤ир┤┐р╡╝р┤гр┤п р┤лр┤▓р┤В",
        "diagnosis_sub": "ЁЯй║ р┤ир┤┐р┤Щр╡Нр┤Щр┤│р╡Бр┤Яр╡Ж р┤Йр┤др╡Нр┤др┤░р┤Щр╡Нр┤Щр┤│р╡Ж р┤Ер┤Яр┤┐р┤╕р╡Нр┤ер┤╛р┤ир┤ор┤╛р┤Хр╡Нр┤Хр┤┐, р┤ир┤┐р┤Щр╡Нр┤Щр╡╛р┤Хр╡Нр┤Хр╡Н **{}** р┤Йр┤гр╡Нр┤Яр┤╛р┤Хр┤╛р┤В",
        "confidence_label": "р┤╡р┤┐р┤╢р╡Нр┤╡р┤╛р┤╕р╡Нр┤пр┤д р┤ир┤┐р┤▓",
        "about_sub": "ЁЯУЦ р┤Хр╡Бр┤▒р┤┐р┤Ър╡Нр┤Ър╡Н",
        "precautions_sub": "ЁЯЫбя╕П р┤ир┤┐р╡╝р┤жр╡Нр┤жр╡Зр┤╢р┤┐р┤Хр╡Нр┤Хр┤кр╡Нр┤кр╡Жр┤Яр╡Нр┤Я р┤ор╡Бр╡╗р┤Хр┤░р╡Бр┤др┤▓р╡Бр┤Хр╡╛",
        "no_description": "р┤╡р┤┐р┤╡р┤░р┤гр┤В р┤▓р┤нр╡Нр┤пр┤ор┤▓р╡Нр┤▓.",
        "start_over": "р┤╡р╡Ар┤гр╡Нр┤Яр╡Бр┤В р┤Жр┤░р┤Вр┤нр┤┐р┤Хр╡Нр┤Хр╡Бр┤Х",
        "thank_you": "р┤Ър┤╛р┤▒р╡Нр┤▒р╡Нр┤мр╡Лр┤Яр╡Нр┤Яр╡Н р┤Йр┤кр┤пр╡Лр┤Чр┤┐р┤Ър╡Нр┤Ър┤др┤┐р┤ир╡Н р┤ир┤ир╡Нр┤жр┤┐. р┤ир┤┐р┤Щр╡Нр┤Щр╡╛р┤Хр╡Нр┤Хр╡Н р┤ир┤▓р╡Нр┤▓ р┤Жр┤░р╡Лр┤Чр╡Нр┤пр┤В р┤ир╡Зр┤░р╡Бр┤ир╡Нр┤ир╡Б, **{}**!",
        "login_header": "р┤▓р╡Лр┤Чр┤┐р╡╗ р┤Ър╡Жр┤пр╡Нр┤пр╡Бр┤Х",
        "username_label": "р┤Йр┤кр┤пр╡Лр┤Хр╡Нр┤др╡Гр┤ир┤╛р┤ор┤В",
        "password_label": "р┤кр┤╛р┤╕р╡НтАМр┤╡р╡Зр┤бр╡Н",
        "login_button": "р┤▓р╡Лр┤Чр┤┐р╡╗ р┤Ър╡Жр┤пр╡Нр┤пр╡Бр┤Х",
        "login_error": "р┤Ер┤╕р┤╛р┤зр╡Бр┤╡р┤╛р┤п р┤Йр┤кр┤пр╡Лр┤Хр╡Нр┤др╡Гр┤ир┤╛р┤ор┤В р┤Ер┤▓р╡Нр┤▓р╡Жр┤Щр╡Нр┤Хр┤┐р╡╜ р┤кр┤╛р┤╕р╡НтАМр┤╡р╡Зр┤бр╡Н. р┤╡р╡Ар┤гр╡Нр┤Яр╡Бр┤В р┤╢р╡Нр┤░р┤ор┤┐р┤Хр╡Нр┤Хр╡Бр┤Х.",
        "logout_button": "р┤кр╡Бр┤▒р┤др╡Нр┤др╡Бр┤Хр┤Яр┤Хр╡Нр┤Хр╡Бр┤Х",
        "play_audio": "ЁЯФК р┤░р╡Лр┤Чр┤ир┤┐р╡╝р┤гр┤пр┤В р┤Хр╡Зр╡╛р┤Хр╡Нр┤Хр╡Бр┤Х",
    },
    "mr": {
        "title": "рдЖрд░реЛрдЧреНрдпрд╕реЗрд╡рд╛ рдЪреЕрдЯрдмреЙрдЯ",
        "intro": "рдирдорд╕реНрдХрд╛рд░! рдореА рдПрдХ рдЪреЕрдЯрдмреЙрдЯ рдЖрд╣реЗ, рдЬреЛ рддреБрдореНрд╣рд╛рд▓рд╛ рдкреНрд░рд╛рдердорд┐рдХ рд▓рдХреНрд╖рдгрд╛рдВрдЪреЗ рд╡рд┐рд╢реНрд▓реЗрд╖рдг рдХрд░рдгреНрдпрд╛рд╕ рдорджрдд рдХрд░рдгреНрдпрд╛рд╕рд╛рдареА рдбрд┐рдЭрд╛рдЗрди рдХреЗрд▓рд╛ рдЖрд╣реЗред рдХреГрдкрдпрд╛ рдХрд╛рд╣реА рдкреНрд░рд╢реНрдирд╛рдВрдЪреА рдЙрддреНрддрд░реЗ рджреНрдпрд╛ рдЬреЗрдгреЗрдХрд░реВрди рдореА рддреБрдордЪреА рд╕реНрдерд┐рддреА рдЕрдзрд┐рдХ рдЪрд╛рдВрдЧрд▓реНрдпрд╛ рдкреНрд░рдХрд╛рд░реЗ рд╕рдордЬреВ рд╢рдХреЗрдиред",
        "name_label": "рддреБрдордЪреЗ рдирд╛рд╡ рдХрд╛рдп рдЖрд╣реЗ?",
        "age_label": "рдХреГрдкрдпрд╛ рддреБрдордЪреЗ рд╡рдп рдкреНрд░рд╡рд┐рд╖реНрдЯ рдХрд░рд╛:",
        "gender_label": "рддреБрдордЪреЗ рд▓рд┐рдВрдЧ рдХрд╛рдп рдЖрд╣реЗ?",
        "gender_options": ["рдкреБрд░реБрд╖", "рдорд╣рд┐рд▓рд╛", "рдЗрддрд░"],
        "symptoms_label": "рддреБрдордЪреНрдпрд╛ рд▓рдХреНрд╖рдгрд╛рдВрдЪреЗ рд╡рд░реНрдгрди рдХрд░рд╛ (рдХреЛрдгрддреНрдпрд╛рд╣реА рднрд╛рд╖реЗрдд):",
        "submit_button": "рд╕рд╛рджрд░ рдХрд░рд╛",
        "warning_fill_fields": "рдкреБрдвреЗ рдЪрд╛рд▓реВ рдареЗрд╡рдгреНрдпрд╛рд╕рд╛рдареА рдХреГрдкрдпрд╛ рддреБрдордЪреЗ рдирд╛рд╡ рдЖрдгрд┐ рд▓рдХреНрд╖рдгреЗ рдкреНрд░рд╡рд┐рд╖реНрдЯ рдХрд░рд╛.",
        "thinking": "рд╡рд┐рдЪрд╛рд░ рдХрд░рдд рдЖрд╣реЗ...",
        "detected_symptoms": "тЬЕ рдЖрдврд│рд▓реЗрд▓реА рд▓рдХреНрд╖рдгреЗ: {}",
        "error_no_symptoms": "тЭМ рдорд╛рдл рдХрд░рд╛, рдорд▓рд╛ рд╡реИрдз рд▓рдХреНрд╖рдгреЗ рдЖрдврд│рд▓реА рдирд╛рд╣реАрддред рдХреГрдкрдпрд╛ рдЕрдзрд┐рдХ рддрдкрд╢реАрд▓ рджреЗрдКрди рдкреБрдиреНрд╣рд╛ рдкреНрд░рдпрддреНрди рдХрд░рд╛ред",
        "guided_questions_header": "ЁЯдФ рдорд╛рд░реНрдЧрджрд░реНрд╢рд┐рдд рдкреНрд░рд╢реНрди",
        "guided_info": "рддреБрдордЪреНрдпрд╛ рд╕реБрд░реБрд╡рд╛рддреАрдЪреНрдпрд╛ рд▓рдХреНрд╖рдгрд╛рдВрд╡рд░ рдЖрдзрд╛рд░рд┐рдд, рддреБрдореНрд╣рд╛рд▓рд╛ **{}** рдЕрд╕реВ рд╢рдХрддреЛ (рдЖрддреНрдорд╡рд┐рд╢реНрд╡рд╛рд╕: {}%)ред",
        "guided_prompt": "рдЕрдзрд┐рдХ рдЕрдЪреВрдХ рдирд┐рджрд╛рди рдорд┐рд│рд╡рдгреНрдпрд╛рд╕рд╛рдареА, рдХреГрдкрдпрд╛ рдпрд╛ рд╕реНрдерд┐рддреАрд╢реА рд╕рдВрдмрдВрдзрд┐рдд рдЖрдгрдЦреА рдХрд╛рд╣реА рдкреНрд░рд╢реНрдирд╛рдВрдЪреА рдЙрддреНрддрд░реЗ рджреНрдпрд╛ред",
        "guided_symptom_prompt": "рддреБрдореНрд╣рд╛рд▓рд╛ **{}** рджреЗрдЦреАрд▓ рдЖрд╣реЗ рдХрд╛?",
        "guided_button": "рдЕрдВрддрд┐рдо рдирд┐рджрд╛рди рдорд┐рд│рд╡рд╛",
        "no_more_questions": "рд╡рд┐рдЪрд╛рд░рдгреНрдпрд╛рд╕рд╛рдареА рдЖрдгрдЦреА рдкреНрд░рд╢реНрди рдирд╛рд╣реАрддред рддреБрдордЪреНрдпрд╛ рдЕрдВрддрд┐рдо рдирд┐рджрд╛рдирд╛рд╕рд╛рдареА рдЦрд╛рд▓реАрд▓ рдмрдЯрдгрд╛рд╡рд░ рдХреНрд▓рд┐рдХ рдХрд░рд╛ред",
        "result_header": "тЬи рдирд┐рджрд╛рдирд╛рдЪрд╛ рдирд┐рдХрд╛рд▓",
        "diagnosis_sub": "ЁЯй║ рддреБрдордЪреНрдпрд╛ рдЙрддреНрддрд░рд╛рдВрд╡рд░ рдЖрдзрд╛рд░рд┐рдд, рддреБрдореНрд╣рд╛рд▓рд╛ **{}** рдЕрд╕реВ рд╢рдХрддреЛ",
        "confidence_label": "рдЖрддреНрдорд╡рд┐рд╢реНрд╡рд╛рд╕ рдкрд╛рддрд│реА",
        "about_sub": "ЁЯУЦ рдмрджреНрджрд▓",
        "precautions_sub": "ЁЯЫбя╕П рд╕реБрдЪрд╡рд▓реЗрд▓реЗ рдкреНрд░рддрд┐рдмрдВрдз",
        "no_description": "рдХреЛрдгрддреЗрд╣реА рд╡рд░реНрдгрди рдЙрдкрд▓рдмреНрдз рдирд╛рд╣реАред",
        "start_over": "рдкреБрдиреНрд╣рд╛ рд╕реБрд░реВ рдХрд░рд╛",
        "thank_you": "рдЪреЕрдЯрдмреЙрдЯ рд╡рд╛рдкрд░рд▓реНрдпрд╛рдмрджреНрджрд▓ рдзрдиреНрдпрд╡рд╛рджред рддреБрдордЪреНрдпрд╛ рдЪрд╛рдВрдЧрд▓реНрдпрд╛ рдЖрд░реЛрдЧреНрдпрд╛рд╕рд╛рдареА рд╢реБрднреЗрдЪреНрдЫрд╛, **{}**!",
        "login_header": "рд▓реЙрдЧрд┐рди",
        "username_label": "рд╡рд╛рдкрд░рдХрд░реНрддрд╛ рдирд╛рд╡",
        "password_label": "рдкрд╛рд╕рд╡рд░реНрдб",
        "login_button": "рд▓реЙрдЧрд┐рди",
        "login_error": "рдЕрд╡реИрдз рд╡рд╛рдкрд░рдХрд░реНрддрд╛ рдирд╛рд╡ рдХрд┐рдВрд╡рд╛ рдкрд╛рд╕рд╡рд░реНрдбред рдХреГрдкрдпрд╛ рдкреБрдиреНрд╣рд╛ рдкреНрд░рдпрддреНрди рдХрд░рд╛ред",
        "logout_button": "рд▓реЙрдЧрдЖрдЙрдЯ",
        "play_audio": "ЁЯФК рдирд┐рджрд╛рди рдРрдХрд╛",
    },
    "or": {
        "title": "рм╣рнЗрм▓рнНрмермХрнЗрнЯрм╛рм░ рмЪрм╛рмЯрммрнЛрмЯрнН",
        "intro": "рмирморм╕рнНрмХрм╛рм░! рморнБрмБ рмПрмХ рмЪрм╛рмЯрммрнЛрмЯрнН рмЕрмЯрнЗ рмпрм╛рм╣рм╛ рмЖрмкрмгрмЩрнНрмХрнБ рмкрнНрм░рм╛рмерморм┐рмХ рм░рнЛрмЧ рм▓рмХрнНрм╖рмг рммрм┐рм╢рнНрм│рнЗрм╖рмгрм░рнЗ рм╕рм╛рм╣рм╛рмпрнНрнЯ рмХрм░рм┐рммрм╛ рмкрм╛рмЗрмБ рмбрм┐рмЬрм╛рмЗрмирнН рмХрм░рм╛рмпрм╛рмЗрмЫрм┐ред рморнБрмБ рмЖрмкрмгрмЩрнНрмХ рмЕрммрм╕рнНрмерм╛рмХрнБ рмнрм▓ рмнрм╛рммрм░рнЗ рммрнБрмЭрм┐рмкрм╛рм░рм┐рммрм╛ рмкрм╛рмЗрмБ рмжрнЯрм╛рмХрм░рм┐ рмХрм┐рмЫрм┐ рмкрнНрм░рм╢рнНрмирм░ рмЙрмдрнНрмдрм░ рмжрм┐рмЕрмирнНрмдрнБред",
        "name_label": "рмЖрмкрмгрмЩрнНрмХ рмирм╛рмо рмХ'рмг?",
        "age_label": "рмжрнЯрм╛рмХрм░рм┐ рмЖрмкрмгрмЩрнНрмХ рммрнЯрм╕ рмжрм┐рмЕрмирнНрмдрнБ:",
        "gender_label": "рмЖрмкрмгрмЩрнНрмХ рм▓рм┐рмЩрнНрмЧ рмХ'рмг?",
        "gender_options": ["рмкрнБрм░рнБрм╖", "рморм╣рм┐рм│рм╛", "рмЕрмирнНрнЯ"],
        "symptoms_label": "рмЖрмкрмгрмЩрнНрмХ рм░рнЛрмЧрм▓рмХрнНрм╖рмг рммрм░рнНрмгрнНрмгрмирм╛ рмХрм░рмирнНрмдрнБ (рмпрнЗрмХрнМрмгрм╕рм┐ рмнрм╛рм╖рм╛рм░рнЗ):",
        "submit_button": "рмжрм╛рмЦрм▓ рмХрм░рмирнНрмдрнБ",
        "warning_fill_fields": "рмЖрмЧрмХрнБ рммрмврм┐рммрм╛ рмкрм╛рмЗрмБ рмжрнЯрм╛рмХрм░рм┐ рмЖрмкрмгрмЩрнНрмХ рмирм╛рмо рмПрммрмВ рм░рнЛрмЧрм▓рмХрнНрм╖рмг рмжрм╛рмЦрм▓ рмХрм░рмирнНрмдрнБред",
        "thinking": "рмнрм╛рммрнБрмЫрм┐...",
        "detected_symptoms": "тЬЕ рмЪрм┐рм╣рнНрмирмЯ рм╣рнЛрмЗрмерм┐рммрм╛ рм░рнЛрмЧрм▓рмХрнНрм╖рмг: {}",
        "error_no_symptoms": "тЭМ рмжрнБрмГрмЦрм┐рмд, рморнБрмБ рммрнИрмз рм░рнЛрмЧрм▓рмХрнНрм╖рмг рмЪрм┐рм╣рнНрмирмЯ рмХрм░рм┐рмкрм╛рм░рм┐рм▓рм┐ рмирм╛рм╣рм┐рмБред рмжрнЯрм╛рмХрм░рм┐ рмЕрмзрм┐рмХ рммрм┐рммрм░рмгрнА рм╕рм╣рм┐рмд рмкрнБрмирм░рнНрммрм╛рм░ рмЪрнЗрм╖рнНрмЯрм╛ рмХрм░рмирнНрмдрнБред",
        "guided_questions_header": "ЁЯдФ рморм╛рм░рнНрмЧрмжрм░рнНрм╢рмХ рмкрнНрм░рм╢рнНрми",
        "guided_info": "рмЖрмкрмгрмЩрнНрмХ рмкрнНрм░рм╛рм░рморнНрмнрм┐рмХ рм░рнЛрмЧрм▓рмХрнНрм╖рмг рмЙрмкрм░рнЗ рмЖрмзрм╛рм░ рмХрм░рм┐, рмЖрмкрмгрмЩрнНрмХрнБ **{}** рм╣рнЛрмЗрмкрм╛рм░рнЗ (рмЖрмдрнНрморммрм┐рм╢рнНрн▒рм╛рм╕: {}%)ред",
        "guided_prompt": "рмЕрмзрм┐рмХ рм╕рмарм┐рмХрнН рм░рнЛрмЧрмирм┐рм░рнНрмгрнНрмгрнЯ рмкрм╛рмЗрмБ, рмжрнЯрм╛рмХрм░рм┐ рмПрм╣рм┐ рмЕрммрм╕рнНрмерм╛ рм╕рморнНрммрмирнНрмзрнАрнЯ рмЖрмЙ рмХрм┐рмЫрм┐ рмкрнНрм░рм╢рнНрмирм░ рмЙрмдрнНрмдрм░ рмжрм┐рмЕрмирнНрмдрнБред",
        "guided_button": "рмЕрмирнНрмдрм┐рмо рм░рнЛрмЧрмирм┐рм░рнНрмгрнНрмгрнЯ рмкрм╛рмЖрмирнНрмдрнБ",
        "no_more_questions": "рмХрнМрмгрм╕рм┐ рмЕрмзрм┐рмХ рмкрнНрм░рм╢рнНрми рмирм╛рм╣рм┐рмБред рмЖрмкрмгрмЩрнНрмХ рмЕрмирнНрмдрм┐рмо рм░рнЛрмЧрмирм┐рм░рнНрмгрнНрмгрнЯ рмкрм╛рмЗрмБ рмдрм│рнЗ рмХрнНрм▓рм┐рмХрнН рмХрм░рмирнНрмдрнБред",
        "result_header": "тЬи рм░рнЛрмЧрмирм┐рм░рнНрмгрнНрмгрнЯ рмлрм│рм╛рмлрм│",
        "diagnosis_sub": "ЁЯй║ рмЖрмкрмгрмЩрнНрмХ рмЙрмдрнНрмдрм░ рмЙрмкрм░рнЗ рмЖрмзрм╛рм░ рмХрм░рм┐, рмЖрмкрмгрмЩрнНрмХрнБ **{}** рм╣рнЛрмЗрмкрм╛рм░рнЗ",
        "confidence_label": "рмЖрмдрнНрморммрм┐рм╢рнНрн▒рм╛рм╕ рм╕рнНрмдрм░",
        "about_sub": "ЁЯУЦ рммрм┐рм╖рнЯрм░рнЗ",
        "precautions_sub": "ЁЯЫбя╕П рм╕рнБрмЭрм╛рмпрм╛рмЗрмерм┐рммрм╛ рм╕рм╛рммрмзрм╛рмирмдрм╛",
        "no_description": "рмХрнМрмгрм╕рм┐ рммрм░рнНрмгрнНрмгрмирм╛ рмЙрмкрм▓рммрнНрмз рмирм╛рм╣рм┐рмБред",
        "start_over": "рмкрнБрмирм░рнНрммрм╛рм░ рмЖрм░рморнНрмн рмХрм░рмирнНрмдрнБ",
        "thank_you": "рмЪрм╛рмЯрммрнЛрмЯрнН рммрнНрнЯрммрм╣рм╛рм░ рмХрм░рм┐рмерм┐рммрм╛рм░рнБ рмзрмирнНрнЯрммрм╛рмжред рмЖрмкрмгрмЩрнНрмХрнБ рмнрм▓ рм╕рнНрн▒рм╛рм╕рнНрмернНрнЯ рмХрм╛рмормирм╛ рмХрм░рнБрмЫрм┐, **{}**!",
        "login_header": "рм▓рмЧрнН рмЗрмирнН",
        "username_label": "рмЙрмкрмнрнЛрмХрнНрмдрм╛ рмирм╛рмо",
        "password_label": "рмкрм╛рм╕рн▒рм╛рм░рнНрмб",
        "login_button": "рм▓рмЧрнН рмЗрмирнН",
        "login_error": "рмЕрммрнИрмз рмЙрмкрмнрнЛрмХрнНрмдрм╛ рмирм╛рмо рмХрм┐рморнНрммрм╛ рмкрм╛рм╕рн▒рм╛рм░рнНрмбред рмжрнЯрм╛рмХрм░рм┐ рмкрнБрмирм░рнНрммрм╛рм░ рмЪрнЗрм╖рнНрмЯрм╛ рмХрм░рмирнНрмдрнБред",
        "logout_button": "рм▓рмЧрнН рмЖрмЙрмЯрнН",
        "play_audio": "ЁЯФК рм░рнЛрмЧрмирм┐рм░рнНрмгрнНрмгрнЯ рм╢рнБрмгрмирнНрмдрнБ",
    },
    "pa": {
        "title": "ри╕ри┐ри╣рид ри╕рй░ринри╛ри▓ риЪрйИриЯримрйЛриЯ",
        "intro": "ри╣рйИри▓рйЛ! риорйИриВ риЗрй▒риХ риЪрйИриЯримрйЛриЯ ри╣ри╛риВ риЬрйЛ ридрйБри╣ри╛риирйВрй░ ри╕ри╝рйБри░рйВриЖридрйА ри▓рй▒риЫригри╛риВ рижрйЗ ри╡ри┐ри╕ри╝ри▓рйЗри╕ри╝риг ри╡ри┐рй▒риЪ риорижриж риХри░рии ри▓риИ ридри┐риЖри░ риХрйАридри╛ риЧри┐риЖ ри╣рйИред риХри┐ри░рикри╛ риХри░риХрйЗ риХрйБриЭ ри╕ри╡ри╛ри▓ри╛риВ рижрйЗ риЬри╡ри╛рим рижри┐риУ ридри╛риВ риЬрйЛ риорйИриВ ридрйБри╣ри╛рибрйА ри╕риери┐ридрйА риирйВрй░ римри┐ри╣ридри░ риврй░риЧ риири╛ри▓ ри╕риориЭ ри╕риХри╛риВред",
        "name_label": "ридрйБри╣ри╛рибри╛ риири╛рио риХрйА ри╣рйИ?",
        "age_label": "риХри┐ри░рикри╛ риХри░риХрйЗ риЖрикригрйА риЙриори░ рижри╛риЦри▓ риХри░рйЛ:",
        "gender_label": "ридрйБри╣ри╛рибри╛ ри▓ри┐рй░риЧ риХрйА ри╣рйИ?",
        "gender_options": ["рикрйБри░ри╕ри╝", "риЗри╕ридри░рйА", "ри╣рйЛри░"],
        "symptoms_label": "риЖрикригрйЗ ри▓рй▒риЫригри╛риВ рижри╛ ри╡ри░ригрии риХри░рйЛ (риХри┐ри╕рйЗ ри╡рйА ринри╛ри╕ри╝ри╛ ри╡ри┐рй▒риЪ):",
        "submit_button": "рижри╛риЦри▓ риХри░рйЛ",
        "warning_fill_fields": "риХри┐ри░рикри╛ риХри░риХрйЗ риЬри╛ри░рйА ри░рй▒риЦриг ри▓риИ риЖрикригри╛ риири╛рио риЕридрйЗ ри▓рй▒риЫриг рижри╛риЦри▓ риХри░рйЛред",
        "thinking": "ри╕рйЛриЪ ри░ри┐ри╣ри╛ ри╣рйИ...",
        "detected_symptoms": "тЬЕ рикриЫри╛ригрйЗ риЧриП ри▓рй▒риЫриг: {}",
        "error_no_symptoms": "тЭМ риори╛рил риХри░риири╛, риорйИриВ риХрйЛриИ ри╡рйИриз ри▓рй▒риЫриг рикриЫри╛риг риири╣рйАриВ ри╕риХри┐риЖред риХри┐ри░рикри╛ риХри░риХрйЗ ри╣рйЛри░ ри╡рйЗри░ри╡ри┐риЖриВ риири╛ри▓ рижрйБримри╛ри░ри╛ риХрйЛри╕ри╝ри┐ри╕ри╝ риХри░рйЛред",
        "guided_questions_header": "ЁЯдФ риЧри╛риИрибриб ри╕ри╡ри╛ри▓",
        "guided_info": "ридрйБри╣ри╛рибрйЗ ри╕ри╝рйБри░рйВриЖридрйА ри▓рй▒риЫригри╛риВ рижрйЗ риЖризри╛ри░ 'ридрйЗ, ридрйБри╣ри╛риирйВрй░ **{}** ри╣рйЛ ри╕риХрижри╛ ри╣рйИ (ринри░рйЛри╕ри╛: {}%)ред",
        "guided_prompt": "ри╡ризрйЗри░рйЗ ри╕ри╣рйА риири┐рижри╛рии рикрйНри░ри╛рикрид риХри░рии ри▓риИ, риХри┐ри░рикри╛ риХри░риХрйЗ риЗри╕ ри╕риери┐ридрйА риири╛ри▓ ри╕рй░римрй░ризри┐рид риХрйБриЭ ри╣рйЛри░ ри╕ри╡ри╛ри▓ри╛риВ рижрйЗ риЬри╡ри╛рим рижри┐риУред",
        "guided_symptom_prompt": "риХрйА ридрйБри╣ри╛риирйВрй░ **{}** ри╡рйА ри╣рйИ?",
        "guided_button": "риЕрй░ридри┐рио риири┐рижри╛рии рикрйНри░ри╛рикрид риХри░рйЛ",
        "no_more_questions": "рикрйБрй▒риЫриг ри▓риИ ри╣рйЛри░ риХрйЛриИ ри╕ри╡ри╛ри▓ риири╣рйАриВ ри╣рииред риЖрикригрйЗ риЕрй░ридри┐рио риири┐рижри╛рии ри▓риИ ри╣рйЗриари╛риВ риХри▓ри┐рй▒риХ риХри░рйЛред",
        "result_header": "тЬи риири┐рижри╛рии рижри╛ рииридрйАриЬри╛",
        "diagnosis_sub": "ЁЯй║ ридрйБри╣ри╛рибрйЗ риЬри╡ри╛римри╛риВ рижрйЗ риЖризри╛ри░ 'ридрйЗ, ридрйБри╣ри╛риирйВрй░ **{}** ри╣рйЛ ри╕риХрижри╛ ри╣рйИ",
        "confidence_label": "ринри░рйЛри╕рйЗ рижри╛ рикрй▒ризри░",
        "about_sub": "ЁЯУЦ римри╛ри░рйЗ",
        "precautions_sub": "ЁЯЫбя╕П ри╕рйБриЭри╛риП риЧриП ри╕ри╛ри╡ризри╛риирйАриЖриВ",
        "no_description": "риХрйЛриИ ри╡рйЗри░ри╡ри╛ риЙрикри▓римриз риири╣рйАриВ ри╣рйИред",
        "start_over": "рижрйБримри╛ри░ри╛ ри╕ри╝рйБри░рйВ риХри░рйЛ",
        "thank_you": "риЪрйИриЯримрйЛриЯ рижрйА ри╡ри░ридрйЛриВ риХри░рии ри▓риИ ридрйБри╣ри╛рибри╛ ризрй░риири╡ри╛рижред ридрйБри╣ри╛рибрйА риЪрй░риЧрйА ри╕ри┐ри╣рид рижрйА риХри╛риориири╛, **{}**!",
        "login_header": "ри▓рйМриЧриЗрии",
        "username_label": "рипрйВриЬри╝ри░риирйЗрио",
        "password_label": "рикри╛ри╕ри╡ри░риб",
        "login_button": "ри▓рйМриЧриЗрии",
        "login_error": "риЧри▓рид рипрйВриЬри╝ри░риирйЗрио риЬри╛риВ рикри╛ри╕ри╡ри░рибред риХри┐ри░рикри╛ риХри░риХрйЗ рижрйБримри╛ри░ри╛ риХрйЛри╕ри╝ри┐ри╕ри╝ риХри░рйЛред",
        "logout_button": "ри▓рйМриЧриЖриЙриЯ",
        "play_audio": "ЁЯФК риири┐рижри╛рии ри╕рйБригрйЛ",
    },
    "ta": {
        "title": "роЪрпБроХро╛родро╛ро░ роЕро░роЯрпНроЯрпИ рокрпКроЯрпНроЯро┐",
        "intro": "ро╡рогроХрпНроХроорпН! роиро╛ройрпН роТро░рпБ роЕро░роЯрпНроЯрпИ рокрпКроЯрпНроЯро┐. роЖро░роорпНрокроХро╛ро▓ роирпЛропро▒ро┐родро▓рпБроХрпНроХрпБ роЙроЩрпНроХро│рпБроХрпНроХрпБ роЙродро╡ роиро╛ройрпН ро╡роЯро┐ро╡роорпИроХрпНроХрокрпНрокроЯрпНроЯрпБро│рпНро│рпЗройрпН. роЙроЩрпНроХро│рпН роиро┐ро▓рпИропрпИ роиро╛ройрпН роЪро┐ро▒рокрпНрокро╛роХрокрпН рокрпБро░ро┐роирпНродрпБроХрпКро│рпНро│ роЪро┐ро▓ роХрпЗро│рпНро╡ро┐роХро│рпБроХрпНроХрпБрокрпН рокродро┐ро▓ро│ро┐роХрпНроХро╡рпБроорпН.",
        "name_label": "роЙроЩрпНроХро│рпН рокрпЖропро░рпН роОройрпНрой?",
        "age_label": "роЙроЩрпНроХро│рпН ро╡ропродрпИ роЙро│рпНро│ро┐роЯро╡рпБроорпН:",
        "gender_label": "роЙроЩрпНроХро│рпН рокро╛ро▓ро┐ройроорпН роОройрпНрой?",
        "gender_options": ["роЖрогрпН", "рокрпЖрогрпН", "рооро▒рпНро▒ро╡рпИ"],
        "symptoms_label": "роЙроЩрпНроХро│рпН роЕро▒ро┐роХрпБро▒ро┐роХро│рпИ ро╡ро┐ро╡ро░ро┐роХрпНроХро╡рпБроорпН (роПродрпЗройрпБроорпН роорпКро┤ро┐ропро┐ро▓рпН):",
        "submit_button": "роЪрооро░рпНрокрпНрокро┐",
        "warning_fill_fields": "родрпКроЯро░, роЙроЩрпНроХро│рпН рокрпЖропро░рпН рооро▒рпНро▒рпБроорпН роЕро▒ро┐роХрпБро▒ро┐роХро│рпИ роЙро│рпНро│ро┐роЯро╡рпБроорпН.",
        "thinking": "роЪро┐роирпНродро┐родрпНродрпБроХрпНроХрпКрогрпНроЯро┐ро░рпБроХрпНроХро┐ро▒родрпБ...",
        "detected_symptoms": "тЬЕ роХрогрпНроЯро▒ро┐ропрокрпНрокроЯрпНроЯ роЕро▒ро┐роХрпБро▒ро┐роХро│рпН: {}",
        "error_no_symptoms": "тЭМ рооройрпНройро┐роХрпНроХро╡рпБроорпН, роЪро░ро┐ропро╛рой роЕро▒ро┐роХрпБро▒ро┐роХро│рпИроХрпН роХрогрпНроЯро▒ро┐роп роорпБроЯро┐ропро╡ро┐ро▓рпНро▓рпИ. роорпЗро▓рпБроорпН ро╡ро┐ро╡ро░роЩрпНроХро│рпБроЯройрпН роорпАрогрпНроЯрпБроорпН роорпБропро▒рпНроЪро┐роХрпНроХро╡рпБроорпН.",
        "guided_questions_header": "ЁЯдФ ро╡ро┤ро┐роХро╛роЯрпНроЯрокрпНрокроЯрпНроЯ роХрпЗро│рпНро╡ро┐роХро│рпН",
        "guided_info": "роЙроЩрпНроХро│рпН роЖро░роорпНрок роЕро▒ро┐роХрпБро▒ро┐роХро│ро┐ройрпН роЕроЯро┐рокрпНрокроЯрпИропро┐ро▓рпН, роЙроЩрпНроХро│рпБроХрпНроХрпБ **{}** роЗро░рпБроХрпНроХро▓ро╛роорпН (роироорпНрокро┐роХрпНроХрпИ: {}%).",
        "guided_prompt": "роорпЗро▓рпБроорпН родрпБро▓рпНро▓ро┐ропрооро╛рой роирпЛропро▒ро┐родро▓рпИрокрпН рокрпЖро▒, роЗроирпНрод роиро┐ро▓рпИ родрпКроЯро░рпНрокро╛рой роЗройрпНройрпБроорпН роЪро┐ро▓ роХрпЗро│рпНро╡ро┐роХро│рпБроХрпНроХрпБрокрпН рокродро┐ро▓ро│ро┐роХрпНроХро╡рпБроорпН.",
        "guided_symptom_prompt": "роЙроЩрпНроХро│рпБроХрпНроХрпБ **{}**роорпН роЙро│рпНро│родро╛?",
        "guided_button": "роЗро▒рпБродро┐ роирпЛропро▒ро┐родро▓рпИрокрпН рокрпЖро▒рпБ",
        "no_more_questions": "роХрпЗроЯрпНрокродро▒рпНроХрпБ ро╡рпЗро▒рпБ роХрпЗро│рпНро╡ро┐роХро│рпН роЗро▓рпНро▓рпИ. роЙроЩрпНроХро│рпН роЗро▒рпБродро┐ роирпЛропро▒ро┐родро▓рпБроХрпНроХрпБ роХрпАро┤рпЗ роХро┐ро│ро┐роХрпН роЪрпЖропрпНропро╡рпБроорпН.",
        "result_header": "тЬи роирпЛропро▒ро┐родро▓рпН роорпБроЯро┐ро╡рпБ",
        "diagnosis_sub": "ЁЯй║ роЙроЩрпНроХро│рпН рокродро┐ро▓рпНроХро│ро┐ройрпН роЕроЯро┐рокрпНрокроЯрпИропро┐ро▓рпН, роЙроЩрпНроХро│рпБроХрпНроХрпБ **{}** роЗро░рпБроХрпНроХро▓ро╛роорпН",
        "confidence_label": "роироорпНрокро┐роХрпНроХрпИ роиро┐ро▓рпИ",
        "about_sub": "ЁЯУЦ рокро▒рпНро▒ро┐",
        "precautions_sub": "ЁЯЫбя╕П рокро░ро┐роирпНродрпБро░рпИроХрпНроХрокрпНрокроЯрпНроЯ роорпБройрпНройрпЖроЪрпНроЪро░ро┐роХрпНроХрпИроХро│рпН",
        "no_description": "ро╡ро┐ро│роХрпНроХроорпН роЗро▓рпНро▓рпИ.",
        "start_over": "роорпАрогрпНроЯрпБроорпН родрпКроЯроЩрпНроХрпБ",
        "thank_you": "роЕро░роЯрпНроЯрпИ рокрпКроЯрпНроЯро┐ропрпИрокрпН рокропройрпНрокроЯрпБродрпНродро┐ропродро▒рпНроХрпБ роиройрпНро▒ро┐. роЙроЩрпНроХро│рпН роиро▓рпНро▓ роЖро░рпЛроХрпНроХро┐ропродрпНродро┐ро▒рпНроХрпБ ро╡ро╛ро┤рпНродрпНродрпБроХрпНроХро│рпН, **{}**!",
        "login_header": "роЙро│рпНроирпБро┤рпИро╡рпБ",
        "username_label": "рокропройро░рпН рокрпЖропро░рпН",
        "password_label": "роХроЯро╡рпБроЪрпНроЪрпКро▓рпН",
        "login_button": "роЙро│рпНроирпБро┤рпИро╡рпБ",
        "login_error": "роЪро░ро┐ропро╛рой рокропройро░рпН рокрпЖропро░рпН роЕро▓рпНро▓родрпБ роХроЯро╡рпБроЪрпНроЪрпКро▓рпНро▓рпИ роЙро│рпНро│ро┐роЯро╡рпБроорпН. роорпАрогрпНроЯрпБроорпН роорпБропро▒рпНроЪро┐роХрпНроХро╡рпБроорпН.",
        "logout_button": "ро╡рпЖро│ро┐ропрпЗро▒рпБ",
        "play_audio": "ЁЯФК роирпЛропро▒ро┐родро▓рпИроХрпН роХрпЗроЯрпНроХро╡рпБроорпН",
    },
    "te": {
        "title": "р░Жр░░р▒Лр░Чр▒Нр░п р░╕р░Вр░░р░Хр▒Нр░╖р░г р░Ър░╛р░Яр▒НтАМр░мр░╛р░Яр▒Н",
        "intro": "р░ир░ор░╕р▒Нр░Хр░╛р░░р░В! р░ир▒Зр░ир▒Б р░кр▒Нр░░р░╛р░ер░ор░┐р░Х р░▓р░Хр▒Нр░╖р░гр░╛р░▓ р░╡р░┐р░╢р▒Нр░▓р▒Зр░╖р░гр░▓р▒Л р░ор▒Ар░Хр▒Б р░╕р░╣р░╛р░пр░кр░бр░Яр░╛р░ир░┐р░Хр░┐ р░░р▒Вр░кр▒Кр░Вр░жр░┐р░Вр░Ър░┐р░и р░Ър░╛р░Яр▒НтАМр░мр░╛р░Яр▒Н. р░ор▒А р░кр░░р░┐р░╕р▒Нр░ер░┐р░др░┐р░ир░┐ р░мр░╛р░Чр░╛ р░Ер░░р▒Нр░ер░В р░Ър▒Зр░╕р▒Бр░Хр▒Лр░╡р░бр░╛р░ир░┐р░Хр░┐ р░жр░пр░Ър▒Зр░╕р░┐ р░Хр▒Кр░ир▒Нр░ир░┐ р░кр▒Нр░░р░╢р▒Нр░ир░▓р░Хр▒Б р░╕р░ор░╛р░зр░╛р░ир░В р░Зр░╡р▒Нр░╡р░Вр░бр░┐.",
        "name_label": "р░ор▒А р░кр▒Зр░░р▒Б р░Пр░ор░┐р░Яр░┐?",
        "age_label": "р░жр░пр░Ър▒Зр░╕р░┐ р░ор▒А р░╡р░пр░╕р▒Нр░╕р▒Бр░ир▒Б р░ир░ор▒Лр░жр▒Б р░Ър▒Зр░пр░Вр░бр░┐:",
        "gender_label": "р░ор▒А р░▓р░┐р░Вр░Чр░В р░Пр░ор░┐р░Яр░┐?",
        "gender_options": ["р░кр▒Бр░░р▒Бр░╖р▒Бр░бр▒Б", "р░╕р▒Нр░др▒Нр░░р▒А", "р░Зр░др░░"],
        "symptoms_label": "р░ор▒А р░▓р░Хр▒Нр░╖р░гр░╛р░▓р░ир▒Б р░╡р░┐р░╡р░░р░┐р░Вр░Ър░Вр░бр░┐ (р░Пр░жр▒Ир░ир░╛ р░нр░╛р░╖р░▓р▒Л):",
        "submit_button": "р░╕р░ор░░р▒Нр░кр░┐р░Вр░Ър▒Б",
        "warning_fill_fields": "р░др▒Кр░бр░Чр░бр░╛р░ир░┐р░Хр░┐, р░жр░пр░Ър▒Зр░╕р░┐ р░ор▒А р░кр▒Зр░░р▒Б р░ор░░р░┐р░пр▒Б р░▓р░Хр▒Нр░╖р░гр░╛р░▓р░ир▒Б р░ир░ор▒Лр░жр▒Б р░Ър▒Зр░пр░Вр░бр░┐.",
        "thinking": "р░Жр░▓р▒Лр░Ър░┐р░╕р▒Нр░др▒Бр░ир▒Нр░ир░╛р░ир▒Б...",
        "detected_symptoms": "тЬЕ р░Хр░ир▒Бр░Чр▒Кр░ир▒Нр░и р░▓р░Хр▒Нр░╖р░гр░╛р░▓р▒Б: {}",
        "error_no_symptoms": "тЭМ р░Хр▒Нр░╖р░ор░┐р░Вр░Ър░Вр░бр░┐, р░ир▒Зр░ир▒Б р░╕р░░р▒Ир░и р░▓р░Хр▒Нр░╖р░гр░╛р░▓р░ир▒Б р░Хр░ир▒Бр░Чр▒Кр░ир░▓р▒Зр░Хр░кр▒Лр░пр░╛р░ир▒Б. р░жр░пр░Ър▒Зр░╕р░┐ р░ор░░р░┐р░Вр░д р░╕р░ор░╛р░Ър░╛р░░р░Вр░др▒Л р░ор░│р▒Нр░│р▒А р░кр▒Нр░░р░пр░др▒Нр░ир░┐р░Вр░Ър░Вр░бр░┐.",
        "guided_questions_header": "ЁЯдФ р░ор░╛р░░р▒Нр░Чр░жр░░р▒Нр░╢р░Х р░кр▒Нр░░р░╢р▒Нр░ир░▓р▒Б",
        "guided_info": "р░ор▒Ар░░р▒Б р░Зр░Ър▒Нр░Ър░┐р░и р░▓р░Хр▒Нр░╖р░гр░╛р░▓ р░Жр░зр░╛р░░р░Вр░Чр░╛, р░ор▒Ар░Хр▒Б **{}** р░Йр░Вр░бр░╡р░Ър▒Нр░Ър▒Б (р░╡р░┐р░╢р▒Нр░╡р░╕р░ир▒Ар░пр░д: {}%).",
        "guided_prompt": "р░ор░░р░┐р░Вр░д р░Цр░Ър▒Нр░Ър░┐р░др░ор▒Ир░и р░ир░┐р░░р▒Нр░зр░╛р░░р░г р░Хр▒Лр░╕р░В, р░жр░пр░Ър▒Зр░╕р░┐ р░И р░кр░░р░┐р░╕р▒Нр░ер░┐р░др░┐р░Хр░┐ р░╕р░Вр░мр░Вр░зр░┐р░Вр░Ър░┐р░и р░ор░░р░┐р░Хр▒Кр░ир▒Нр░ир░┐ р░кр▒Нр░░р░╢р▒Нр░ир░▓р░Хр▒Б р░╕р░ор░╛р░зр░╛р░ир░В р░Зр░╡р▒Нр░╡р░Вр░бр░┐.",
        "guided_symptom_prompt": "р░ор▒Ар░Хр▒Б **{}** р░Хр▒Вр░бр░╛ р░Йр░Вр░жр░╛?",
        "guided_button": "р░Ър░┐р░╡р░░р░┐ р░ир░┐р░░р▒Нр░зр░╛р░░р░г р░кр▒Кр░Вр░жр░Вр░бр░┐",
        "no_more_questions": "р░Ер░бр░Чр░бр░╛р░ир░┐р░Хр░┐ р░Зр░Вр░Хр░╛ р░кр▒Нр░░р░╢р▒Нр░ир░▓р▒Б р░▓р▒Зр░╡р▒Б. р░ор▒А р░Ър░┐р░╡р░░р░┐ р░ир░┐р░░р▒Нр░зр░╛р░░р░г р░Хр▒Лр░╕р░В р░Хр░┐р░Вр░ж р░Хр▒Нр░▓р░┐р░Хр▒Н р░Ър▒Зр░пр░Вр░бр░┐.",
        "result_header": "тЬи р░ир░┐р░░р▒Нр░зр░╛р░░р░г р░лр░▓р░┐р░др░В",
        "diagnosis_sub": "ЁЯй║ р░ор▒А р░╕р░ор░╛р░зр░╛р░ир░╛р░▓ р░Жр░зр░╛р░░р░Вр░Чр░╛, р░ор▒Ар░Хр▒Б **{}** р░Йр░Вр░бр░╡р░Ър▒Нр░Ър▒Б",
        "confidence_label": "р░╡р░┐р░╢р▒Нр░╡р░╕р░ир▒Ар░пр░д р░╕р▒Нр░ер░╛р░пр░┐",
        "about_sub": "ЁЯУЦ р░Чр▒Бр░░р░┐р░Вр░Ър░┐",
        "precautions_sub": "ЁЯЫбя╕П р░╕р▒Вр░Ър░┐р░Вр░Ър░┐р░и р░Ьр░╛р░Чр▒Нр░░р░др▒Нр░др░▓р▒Б",
        "no_description": "р░╡р░┐р░╡р░░р░г р░Ер░Вр░жр▒Бр░мр░╛р░Яр▒Бр░▓р▒Л р░▓р▒Зр░жр▒Б.",
        "start_over": "р░ор░│р▒Нр░│р▒А р░кр▒Нр░░р░╛р░░р░Вр░нр░┐р░Вр░Ър▒Б",
        "thank_you": "р░Ър░╛р░Яр▒НтАМр░мр░╛р░Яр▒НтАМр░ир▒Б р░Йр░кр░пр▒Лр░Чр░┐р░Вр░Ър░┐р░ир░Вр░жр▒Бр░Хр▒Б р░зр░ир▒Нр░пр░╡р░╛р░жр░╛р░▓р▒Б. р░ор▒Ар░Хр▒Б р░ор░Вр░Ър░┐ р░Жр░░р▒Лр░Чр▒Нр░пр░В р░Йр░Вр░бр░╛р░▓р░ир░┐ р░Хр▒Лр░░р▒Бр░Хр▒Бр░Вр░Яр▒Бр░ир▒Нр░ир░╛р░ир▒Б, **{}**!",
        "login_header": "р░▓р░╛р░Чр░┐р░ир▒Н",
        "username_label": "р░╡р░┐р░ир░┐р░пр▒Лр░Чр░жр░╛р░░р▒Б р░кр▒Зр░░р▒Б",
        "password_label": "р░кр░╛р░╕р▒Нр░╡р░░р▒Нр░бр▒Н",
        "login_button": "р░▓р░╛р░Чр░┐р░ир▒Н",
        "login_error": "р░др░кр▒Нр░кр▒Бр░бр▒Б р░╡р░┐р░ир░┐р░пр▒Лр░Чр░жр░╛р░░р▒Б р░кр▒Зр░░р▒Б р░▓р▒Зр░жр░╛ р░кр░╛р░╕р▒НтАМр░╡р░░р▒Нр░бр▒Н. р░жр░пр░Ър▒Зр░╕р░┐ р░ор░│р▒Нр░│р▒А р░кр▒Нр░░р░пр░др▒Нр░ир░┐р░Вр░Ър░Вр░бр░┐.",
        "logout_button": "р░ир░┐р░╖р▒Нр░Хр▒Нр░░р░ор░┐р░Вр░Ър▒Б",
        "play_audio": "ЁЯФК р░ир░┐р░░р▒Нр░зр░╛р░░р░г р░╡р░┐р░ир░Вр░бр░┐",
    },
}

# Supported TTS voices
TTS_VOICES = {
    "en": "Kore", "hi": "Kore", "es": "Kore", "fr": "Kore", "de": "Kore", "ja": "Kore",
    "ru": "Kore", "ar": "Kore", "zh": "Kore", "bn": "Kore", "gu": "Kore", "kn": "Kore",
    "ml": "Kore", "mr": "Kore", "or": "Kore", "pa": "Kore", "ta": "Kore", "te": "Kore"
}

# ------------------ Global Dictionaries & Data Loading (Cached for Performance) ------------------
@st.cache_data
def load_data():
    """Loads and preprocesses the training and testing data."""
    try:
        # Corrected file paths
        training = pd.read_csv('Data/Training.csv')
        testing = pd.read_csv('Data/Testing.csv')
        training.columns = training.columns.str.replace(r"\.\d+$", "", regex=True)
        testing.columns = testing.columns.str.replace(r"\.\d+$", "", regex=True)
        training = training.loc[:, ~training.columns.duplicated()]
        testing = testing.loc[:, ~testing.columns.duplicated()]
        return training, testing
    except FileNotFoundError:
        st.error("Error: CSV files not found. Please make sure 'Training.csv' and 'Testing.csv' are in the 'Data' directory.")
        st.stop()
    except Exception as e:
        st.error(f"An error occurred while loading data: {e}")
        st.stop()

@st.cache_data
def load_dictionaries():
    """Loads all supplementary data dictionaries."""
    severity_dict = {}
    description_list = {}
    precaution_dict = {}
    try:
        # Corrected file path
        with open('MasterData/symptom_Description.csv') as csv_file:
            for row in csv.reader(csv_file):
                if len(row) > 1:
                    description_list[row[0]] = row[1]
    except FileNotFoundError:
        st.warning("Warning: symptom_Description.csv not found.")
    try:
        # Corrected file path
        with open('MasterData/Symptom_severity.csv') as csv_file:
            for row in csv.reader(csv_file):
                if len(row) > 1:
                    try:
                        severity_dict[row[0]] = int(row[1])
                    except ValueError:
                        pass
    except FileNotFoundError:
        st.warning("Warning: Symptom_severity.csv not found.")
    try:
        # Corrected file path
        with open('MasterData/symptom_precaution.csv') as csv_file:
            for row in csv.reader(csv_file):
                if len(row) > 4:
                    precaution_dict[row[0]] = [row[1], row[2], row[3], row[4]]
    except FileNotFoundError:
        st.warning("Warning: symptom_precaution.csv not found.")
    return severity_dict, description_list, precaution_dict

training, testing = load_data()
severityDictionary, description_list, precautionDictionary = load_dictionaries()
cols = training.columns[:-1]
x = training[cols]
y = training['prognosis']
le = preprocessing.LabelEncoder()
y = le.fit_transform(y)
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.33, random_state=42)

@st.cache_resource
def train_model(x_train, y_train):
    """Trains the Random Forest model."""
    model = RandomForestClassifier(n_estimators=300, random_state=42)
    model.fit(x_train, y_train)
    return model

model = train_model(x_train, y_train)
symptoms_dict = {symptom: idx for idx, symptom in enumerate(cols)}

# ------------------ Symptom Synonyms & Translation ------------------
symptom_synonyms = {
    "stomach ache": "stomach_pain", "belly pain": "stomach_pain", "tummy pain": "stomach_pain",
    "abdominal pain": "stomach_pain", "belly ache": "stomach_pain", "gastric pain": "stomach_pain",
    "body ache": "muscle_pain", "muscle ache": "muscle_pain", "head ache": "headache",
    "head pain": "headache", "migraine": "headache", "chest pain": "chest_pain",
    "feaver": "fever", "loose motion": "diarrhea", "motions": "diarrhea", "khansi": "cough",
    "throat pain": "sore_throat", "runny nose": "chills", "sneezing": "chills",
    "shortness of breath": "breathlessness", "skin rash": "skin_rash", "itchy": "itching",
    "tiredness": "fatigue", "vomiting": "vomit", "nausea": "nausea", "dizzy": "dizziness",
    "sad": "depression", "anxiety": "anxiety",
}

def call_gemini_api(prompt, target_lang="en"):
    """
    Calls the Gemini API to get a translation.
    Uses a custom JSON schema to get a structured response.
    """
    payload = {
        "contents": [{"parts": [{"text": prompt}]}],
        "generationConfig": {
            "responseMimeType": "application/json",
            "responseSchema": {
                "type": "OBJECT",
                "properties": {
                    "translated_text": {"type": "STRING"}
                }
            }
        },
    }
    # Replace with your actual key
    apiKey = "AIzaSyDkqVld6HrzudICqVjgw7Q79S8SBSNLn1s"
    apiUrl = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key={apiKey}"
    try:
        response = requests.post(apiUrl, 
            headers={'Content-Type': 'application/json'},
            data=json.dumps(payload)
        )
        response.raise_for_status()
        result = response.json()
        json_text = result['candidates'][0]['content']['parts'][0]['text']
        parsed_json = json.loads(json_text)
        return parsed_json.get('translated_text', '')
    except requests.exceptions.RequestException as e:
        st.error(f"Translation network error: {e}")
        return ""
    except (KeyError, json.JSONDecodeError) as e:
        st.error(f"Translation parsing error: {e}")
        return ""

@st.cache_data(show_spinner=False)
def translate_to_english(text):
    """Translates text to English for symptom extraction."""
    if not text:
        return ""
    prompt = f"Translate the following text to English and provide only the translated text in a JSON format with the key 'translated_text': '{text}'"
    return call_gemini_api(prompt)

@st.cache_data(show_spinner=False)
def translate_from_english(text, target_lang):
    """Translates text from English to the target language for output display."""
    if not text or target_lang == "en":
        return text
    prompt = f"Translate the following text to {target_lang} and provide only the translated text in a JSON format with the key 'translated_text': '{text}'"
    return call_gemini_api(prompt, target_lang)

def extract_symptoms(user_input, all_symptoms):
    """Extracts symptoms from user input using synonyms, exact, and fuzzy matching."""
    extracted = []
    text = user_input.lower().replace("-", " ")
    for phrase, mapped in symptom_synonyms.items():
        if phrase in text:
            extracted.append(mapped)
    for symptom in all_symptoms:
        if symptom.replace("_", " ") in text:
            extracted.append(symptom)
    words = re.findall(r"\w+", text)
    for word in words:
        close = get_close_matches(
            word, [s.replace("_", " ") for s in all_symptoms], n=1, cutoff=0.8
        )
        if close:
            for sym in all_symptoms:
                if sym.replace("_", " ") == close[0]:
                    extracted.append(sym)
    return list(set(extracted))

def predict_disease(symptoms_list):
    """Predicts a disease based on a list of symptoms."""
    input_vector = np.zeros(len(symptoms_dict))
    for symptom in symptoms_list:
        if symptom in symptoms_dict:
            input_vector[symptoms_dict[symptom]] = 1
    input_df = pd.DataFrame([input_vector], columns=symptoms_dict.keys())
    pred_proba = model.predict_proba(input_df)[0]
    pred_class = np.argmax(pred_proba)
    disease = le.inverse_transform([pred_class])[0]
    confidence = round(pred_proba[pred_class] * 100, 2)
    return disease, confidence, pred_proba

def call_tts_api(text, lang_code):
    """Calls the Gemini API to get a TTS response."""
    voice_name = TTS_VOICES.get(lang_code, "Kore")
    payload = {
        "contents": [{"parts": [{"text": text}]}],
        "generationConfig": {
            "responseModalities": ["AUDIO"],
            "speechConfig": {
                "voiceConfig": {
                    "prebuiltVoiceConfig": {
                        "voiceName": voice_name
                    }
                }
            },
        },
    }
    apiKey = "AIzaSyDkqVld6HrzudICqVjgw7Q79S8SBSNLn1s"
    apiUrl = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-tts:generateContent?key={apiKey}"
    try:
        response = requests.post(apiUrl, 
            headers={'Content-Type': 'application/json'},
            data=json.dumps(payload)
        )
        response.raise_for_status()
        result = response.json()
        audio_data = result['candidates'][0]['content']['parts'][0]['inlineData']['data']
        return base64.b64decode(audio_data)
    except requests.exceptions.RequestException as e:
        st.error(f"TTS network error: {e}")
        return None
    except KeyError:
        st.error("TTS API returned an unexpected response.")
        return None

# ------------------ Streamlit UI ------------------
st.set_page_config(page_title="HealthCare Chatbot", page_icon="ЁЯй║")

if "logged_in" not in st.session_state:
    st.session_state.logged_in = False
if "page" not in st.session_state:
    st.session_state.page = "home"
if "name" not in st.session_state:
    st.session_state.name = ""
if "symptoms_list" not in st.session_state:
    st.session_state.symptoms_list = []
if "initial_prediction" not in st.session_state:
    st.session_state.initial_prediction = None
if "final_prediction" not in st.session_state:
    st.session_state.final_prediction = None
if "guided_symptoms" not in st.session_state:
    st.session_state.guided_symptoms = []
if "lang" not in st.session_state:
    st.session_state.lang = "en"

# Language selection
st.sidebar.title("Language")
selected_lang_name = st.sidebar.selectbox("Select Language", list(LANGUAGES.keys()))
st.session_state.lang = LANGUAGES[selected_lang_name]

# Get current UI text
lang_texts = UI_TEXT.get(st.session_state.lang, UI_TEXT["en"])

# Login Page
if not st.session_state.logged_in:
    st.markdown("<h1 style='text-align: center; color: #1f77b4;'>HealthCare Chatbot</h1>", unsafe_allow_html=True)
    st.markdown("<h3 style='text-align: center;'>Login</h3>", unsafe_allow_html=True)
    
    with st.form(key="login_form"):
        username = st.text_input("Username")
        password = st.text_input("Password", type="password")
        login_button = st.form_submit_button("Login")
        
        if login_button:
            if username == "admin" and password == "password":
                st.session_state.logged_in = True
                st.rerun()
            else:
                st.error("Invalid username or password. Please try again.")

# Main Chatbot Pages (visible only after login)
else:
    st.title(lang_texts["title"])
    st.markdown(lang_texts["intro"])
    
    # Logout button in the sidebar
    if st.sidebar.button("Logout"):
        st.session_state.clear()
        st.rerun()

    if st.session_state.page == "home":
        with st.form(key="user_info_form"):
            st.session_state.name = st.text_input(lang_texts["name_label"])
            age = st.text_input(lang_texts["age_label"])
            gender = st.selectbox(lang_texts["gender_label"], lang_texts["gender_options"])
            symptoms_input_raw = st.text_area(lang_texts["symptoms_label"], height=100)
            submit_button = st.form_submit_button(lang_texts["submit_button"])

        if submit_button:
            if not st.session_state.name or not symptoms_input_raw:
                st.warning(lang_texts["warning_fill_fields"])
            else:
                with st.spinner(lang_texts["thinking"]):
                    symptoms_input_en = translate_to_english(symptoms_input_raw)
                    detected_symptoms = extract_symptoms(symptoms_input_en, cols)
                    if not detected_symptoms:
                        st.error(lang_texts["error_no_symptoms"])
                    else:
                        st.session_state.symptoms_list = detected_symptoms
                        st.success(lang_texts["detected_symptoms"].format(', '.join(st.session_state.symptoms_list).replace('_', ' ')))
                        initial_disease, confidence, _ = predict_disease(st.session_state.symptoms_list)
                        st.session_state.initial_prediction = {"disease": initial_disease, "confidence": confidence}
                        disease_symptoms = list(training[training['prognosis'] == initial_disease].iloc[0][:-1].index[
                            training[training['prognosis'] == initial_disease].iloc[0][:-1] == 1])
                        st.session_state.guided_symptoms = [
                            sym for sym in disease_symptoms if sym not in st.session_state.symptoms_list
                        ][:8]
                        st.session_state.page = "guided_questions"
                        st.rerun()

    elif st.session_state.page == "guided_questions":
        st.header(lang_texts["guided_questions_header"])
        initial_pred = st.session_state.initial_prediction
        st.info(lang_texts["guided_info"].format(initial_pred['disease'], initial_pred['confidence']))
        st.write(lang_texts["guided_prompt"])

        if st.session_state.guided_symptoms:
            with st.form(key="guided_questions_form"):
                new_symptoms = []
                for symptom in st.session_state.guided_symptoms:
                    if st.checkbox(lang_texts["guided_symptom_prompt"].format(symptom.replace('_', ' ')), key=symptom):
                        new_symptoms.append(symptom)
                submit_guided = st.form_submit_button(lang_texts["guided_button"])

            if submit_guided:
                with st.spinner(lang_texts["thinking"]):
                    st.session_state.symptoms_list.extend(new_symptoms)
                    final_disease, final_confidence, _ = predict_disease(st.session_state.symptoms_list)
                    st.session_state.final_prediction = {"disease": final_disease, "confidence": final_confidence}
                    st.session_state.page = "result"
                    st.rerun()
        else:
            st.info(lang_texts["no_more_questions"])
            if st.button(lang_texts["guided_button"]):
                final_disease, final_confidence, _ = predict_disease(st.session_state.symptoms_list)
                st.session_state.final_prediction = {"disease": final_disease, "confidence": final_confidence}
                st.session_state.page = "result"
                st.rerun()

    elif st.session_state.page == "result":
        st.header(lang_texts["result_header"])
        final_pred = st.session_state.final_prediction
        disease = final_pred["disease"]
        confidence = final_pred["confidence"]
        
        translated_disease = translate_from_english(disease, st.session_state.lang)
        st.subheader(lang_texts["diagnosis_sub"].format(translated_disease))
        st.metric(label=lang_texts["confidence_label"], value=f"{confidence}%")
        st.markdown("---")

        st.subheader(lang_texts["about_sub"])
        description = description_list.get(disease, lang_texts["no_description"])
        translated_description = translate_from_english(description, st.session_state.lang)
        st.write(translated_description)

        if disease in precautionDictionary:
            st.subheader(lang_texts["precautions_sub"])
            precautions = precautionDictionary[disease]
            for i, prec in enumerate(precautions, 1):
                translated_prec = translate_from_english(prec, st.session_state.lang)
                st.write(f"{i}. {translated_prec}")
        
        st.markdown("---")
        if st.button(lang_texts["play_audio"]):
            full_text = f"{lang_texts['diagnosis_sub'].format(translated_disease)}. {lang_texts['about_sub']}: {translated_description}."
            if disease in precautionDictionary:
                full_text += f" {lang_texts['precautions_sub']}: " + " ".join(
                    translate_from_english(p, st.session_state.lang) for p in precautionDictionary[disease]
                )
            
            audio_bytes = call_tts_api(full_text, st.session_state.lang)
            if audio_bytes:
                st.audio(audio_bytes, format="audio/wav")

        st.info("ЁЯТб " + random.choice([
            "ЁЯМ╕ Health is wealth, take care of yourself.",
            "ЁЯТк A healthy outside starts from the inside.",
            "тШАя╕П Every day is a chance to get stronger and healthier.",
            "ЁЯМ┐ Take a deep breath, your health matters the most.",
            "ЁЯМ║ Remember, self-care is not selfish.",
        ]))
        
        st.markdown(lang_texts["thank_you"].format(st.session_state.name))
        
        if st.button(lang_texts["start_over"]):
            st.session_state.clear()
            st.rerun()